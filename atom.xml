<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金若愚的blog</title>
  
  <subtitle>你好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hzjry123.github.io/"/>
  <updated>2018-01-19T00:06:57.609Z</updated>
  <id>https://hzjry123.github.io/</id>
  
  <author>
    <name>金若愚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maximum Product subarray</title>
    <link href="https://hzjry123.github.io/2018/01/17/Maximum-Product-subarray/"/>
    <id>https://hzjry123.github.io/2018/01/17/Maximum-Product-subarray/</id>
    <published>2018-01-18T04:48:06.000Z</published>
    <updated>2018-01-19T00:06:57.609Z</updated>
    
    <content type="html"><![CDATA[<h1>152.Maximum-Product-SubaArray</h1><h2>1. Description:</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest product.</p><p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given the array[<span class="number">2</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">4</span>]`,</div><div class="line"></div><div class="line">the contiguous subarray [<span class="number">2</span>,<span class="number">3</span>] has the largest product = <span class="number">6.</span></div></pre></td></tr></table></figure></p><h3>2. Difficulty:</h3><p>Medium</p><h3>3. Solution:</h3><p>&lt;!-- more --&gt;</p><p>It remains us of Maximum-Sum-SubArray, but it is more complicated</p><p>First I came up with a brute $O(n^2)$ solution.</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = nums.length,max = nums[len - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span>[][] product = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</div><div class="line">        product[len - <span class="number">1</span>][len - <span class="number">1</span>] = nums[len - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            product[i][i] = nums[i];</div><div class="line">            max = Math.max(max,nums[i]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">                product[i][j] = nums[i] * product[i + <span class="number">1</span>][j];</div><div class="line">                max = Math.max(max,product[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>But it failed to pass OJ.</p><p>解法一：</p><p>Then I came up with another <strong>Dynamic Programming</strong> Solution.</p><p>我们知道在乘法中，只要乘数不包括0，那么结果在绝对值上也会变大，因此我们要追踪的是当前的最大以及最小值，这两者理论上都有可能在后面变成最大乘积。</p><p>参考Discuss上的一段话</p><blockquote><p>Besides keeping track of the largest product, we also need to keep track of the smallest product. Why? The smallest product, which is the largest in the negative sense could become the maximum when being multiplied by a negative number.</p></blockquote><p>但是我们要保证一点，就是在循环到nums[i]处时，当前步骤的最大值必须是受到nusm[i-1]影响的。在得到最大最小值时，我们要比较的是nums[i]和上一步的最大最小值的乘积以及当前nums[i].</p><p>因此在nums[i] &gt; 0时，我们可以得到转移方程$$R \times x  = 6$$</p><p>$$\frac { dy }{ dx } =\frac { { e }^{ x } }{ 3{ y }^{ 2 } }$$</p><p>$$max[i] = Math.max(max[i - 1] * nums[i],nums[i])$$$$min[i] = Math.max(min[i-1]*nums[i],nums[i])$$在nums[i] &lt; 0 时，我们可以得到转移方程$$max[i] = Math.max(min[i - 1] * nums[i],nums[i])$$</p><p>$$min[i] = Math.max(max[i-1]*nums[i],nums[i])$$</p><p>在得到最后的最大值时只需遍历max数组即可。</p><p>在空间上优化：用变量max，min代替数组，每步都获得当前的最大值。$$cur_max =Math.max(cur_max,max)$$</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct_n</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>],max = res,min = res,len = nums.length;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</div><div class="line">            max = Math.max(nums[i] * max, nums[i]);</div><div class="line">            min = Math.min(nums[i] * min, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> temp = max;</div><div class="line">            max = Math.max(min * nums[i],nums[i]);</div><div class="line">            min = Math.min(temp * nums[i],nums[i]);</div><div class="line">        &#125;</div><div class="line">        res = Math.max(res,max);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解法二:</p><p>解法一代码简化。</p><p>从上一步我们可以看出，max和min的值是交换的。即在nums &lt;= 0的时候，max和min就会发生互换。因此我们可以加入一个判断</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(nums[i] =&lt; <span class="number">0</span>) swap(max,min);</div><div class="line"> max = Math.max(nums[i] * max, nums[i]);</div><div class="line">    min = Math.min(nums[i] * min, nums[i]);</div></pre></td></tr></table></figure></p><p>解法三:</p><p>由于是乘法，考虑没有0的情况，每加入一个新的数，乘积的绝对值都会变大，如果整个数组有n个负数</p><p>若n为偶，则subarray就是全部array。</p><p>若n为奇，则可以得到负数为偶数个的subarray来比较乘积</p><p>头尾是正，如[2,3,-4,1,2]  就是[2,3] 和 [1,2]的比较。</p><p>头尾是负，[-4,1,-2,3,-4]就是[-4,1,-2,3],[1,-2,3,-4]。</p><p>头是正[1,-1,-3,3,-2]就是[1,-1,-3,3]</p><p>尾是正[-1,-1,-3,3,2]就是[-1,-3,3,2]</p><p>由此其实可以直观感觉出，如果有最大值的话，那么最大值一定是会包括头或者尾的。</p><p>故可以遍历两边，从头遍历一遍，从尾遍历一遍</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct_n</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>],len = nums.length,product = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">      product *= nums[i];</div><div class="line">        res = Math.max(res,product);</div><div class="line">      <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)product = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  product = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">      product *= nums[i];</div><div class="line">        res = Math.max(res,product);</div><div class="line">      <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)product = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;152.Maximum-Product-SubaArray&lt;/h1&gt;
&lt;h2&gt;1. Description:&lt;/h2&gt;
&lt;p&gt;Find the contiguous subarray within an array (containing at least one num
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
      <category term="DynamicProgramming" scheme="https://hzjry123.github.io/tags/DynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>461. Hamming Distance</title>
    <link href="https://hzjry123.github.io/2017/11/27/461-Hamming-Distance/"/>
    <id>https://hzjry123.github.io/2017/11/27/461-Hamming-Distance/</id>
    <published>2017-11-27T06:03:28.000Z</published>
    <updated>2018-01-18T17:46:14.701Z</updated>
    
    <content type="html"><![CDATA[<h1>461. Hamming Distance</h1><h3>1. Description:</h3><p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="external">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p><p><strong>Note:</strong>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p><p><strong>Example:</strong></p><p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: x = 1, y = 4</div><div class="line"></div><div class="line"><span class="http"><span class="attribute">Output</span>: 2</span></div><div class="line"></div><div class="line"><span class="applescript">Explanation:</span></div><div class="line"><span class="number">1</span>   (<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</div><div class="line"><span class="number">4</span>   (<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">The <span class="keyword">above</span> arrows point <span class="keyword">to</span> positions <span class="keyword">where</span> <span class="keyword">the</span> corresponding bits are different.</div></pre></td></tr></table></figure></p><p>&lt;!--more--&gt;</p><h3>2. Difficulty:</h3><p>Easy</p><h3>3. Solution:</h3><h4>bit count</h4><p>What does come to your mind first when you see this sentence <code>&quot;corresponding bits are different&quot;</code>? Yes, <code>XOR</code>! Also, do not forget there is a decent function Java provided: <code>Integer.bitCount()</code> ~~~</p><p>But how does bitcount work?</p><p>Let us look at the source code</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-2</span></div><div class="line"><span class="comment">//        java 逐位运算符</span></div><div class="line"><span class="comment">//        逐位或运算符(|),右移运算符(&gt;&gt;)非运算符(~) ,用0补足的右移运算符(&gt;&gt;&gt;)</span></div><div class="line">        i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div><div class="line">        i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>hex: 0x55555555, hex 5: 0101</p><p>binary: 101 0101 0101 0101 0101 0101 0101 0101</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div></pre></td></tr></table></figure></p><p>第一行是计算每两位中的 1 的个数 , 并且用该对应的两位来存储这个个数 ,如 : 01101100 -&gt; 01011000 , 即先把前者每两位分段 01 10 11 00 , 分别有 1 1 2 0 个 1, 用两位二进制数表示为 01 01 10 00, 合起来为 01011000.</p><p>Count the number of 1 in every two digits, and use two digits to store it.</p><p>e.g. 01 10 11 00 store in 01 01 10 00.</p><p>By <code>(i &gt;&gt;&gt; 1)</code>  e.g. <code>01 10 &gt;&gt;&gt; 1</code> = <code>00 11</code> , <code>00 11 &amp; 0x5(01 01)</code> = <code>00 01</code> . We get the number of 1 in high digit in <code>01 10</code> .</p><ul><li>In first two digits<code>01</code>, the number of 1 in high digit is 0.</li></ul><ul><li>In second two digits<code>10</code>, the number of 1 in high digit is 1.</li></ul><p>Then how to get total number of every 2 digits?</p><p>All cases:</p><p><code>11</code> , <code>i &gt;&gt;&gt; 1</code> = <code>1</code> , <code>1 &amp; 0101</code> = <code>1</code> . We suppose to get <code>10</code> . And  <code>11 - 1</code> = <code>10</code> .</p><p><code>10</code> , <code>i &gt;&gt;&gt; 1</code> = <code>1</code> , <code>1 &amp; 0101</code> = <code>1</code> . We suppose to get <code>01</code> . And  <code>10 - 1</code> = <code>01</code> .</p><p><code>01</code> , <code>i &gt;&gt;&gt; 1</code> = <code>0</code> , <code>0 &amp; 0101</code> = <code>0</code> . We suppose to get <code>01</code> . And  <code>01 - 0</code> = <code>01</code> .</p><p><code>00</code> , <code>i &gt;&gt;&gt; 1</code> = <code>0</code> , <code>0 &amp; 0101</code> = <code>0</code> . We suppose to get <code>00</code> . And  <code>00 - 0</code> = <code>00</code> .</p><p>So <code>i - 00 01</code> = <code>01 10 - 00 01</code> = <code>01 10</code>.</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div></pre></td></tr></table></figure></p><p><code>0x33333333</code> = <code>0011 0011 0011…</code></p><p>第二行是计算每四位中的 1 的个数 , 并且用该对应的四位来存储这个个数 .如 : 01101100 经过第一行计算后得 01011000 , 然后把 01011000 每四位分段成 0101 1000 , 段内移位相加 : 前段01+01 =10 , 后段 10+00=10, 分别用四位二进制数表示为 0010 0010, 合起来为 00100010 .</p><p>After counting every two digits. We should count every 4 digits.</p><p>It is quite same like count every two digits. Try it!</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div></pre></td></tr></table></figure></p><p><code>0f0f0f0f</code> = <code>0000 1111 0000 1111 0000 1111</code></p><p>After count 4 digits. We count 8 digits.</p><p>We still check 16digits and 32 digits.</p><h3>other solution1:</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance_2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">//        对于一个正整数如果是偶数，该数的二进制数的最后一位是 0 ，</span></div><div class="line"><span class="comment">// 反之若是奇数，则该数的二进制数的最后一位是 1 。因此，可以考虑利用位移、判断奇偶来实现。</span></div><div class="line">        <span class="keyword">int</span> xor = x ^ y;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((xor &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            xor = xor &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h4>other solution2:</h4><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance_3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">// 计算 1 的个数，若让算法的运算次数只与“ 1 ”的个数有关，那复杂度就能进一步降低。</span></div><div class="line"><span class="comment">// 思想： x &amp; (x-1) 可以消去 x 二进制数的最后一位 1</span></div><div class="line">        <span class="keyword">int</span> xor = x ^ y;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            xor &amp;= xor - <span class="number">1</span>;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>http://15838341661-139-com.iteye.com/blog/1642525</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;461. Hamming Distance&lt;/h1&gt;
&lt;h3&gt;1. Description:&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Largest Rectangle in Histogram</title>
    <link href="https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/"/>
    <id>https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/</id>
    <published>2017-11-20T08:08:54.000Z</published>
    <updated>2017-11-22T02:52:20.617Z</updated>
    
    <content type="html"><![CDATA[<h1>84. Largest Rectangle in Histogram</h1><p><strong>Reference</strong>: http://www.geeksforgeeks.org/largest-rectangle-under-histogram/</p><h3><strong>1</strong>. Description:</h3><p>Given <em>n</em> non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p><p><img src="https://leetcode.com/static/images/problemset/histogram.png" alt="img"></p><p>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p><p><img src="https://leetcode.com/static/images/problemset/histogram_area.png" alt="img"></p><p>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p><p>&lt;!--more--&gt;</p><h3>2. Difficulty:</h3><p>Hard</p><h3>3. Relative Problems</h3><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">85. </span>Maximal Rectangle</div><div class="line"><span class="bullet">221. </span>Maximal Square</div></pre></td></tr></table></figure></p><h3>4. Solution:</h3><p><strong>Analysis</strong>: How to get a Largest Rectangle?  The problems sounds like buckets effect. The main idea is to find <strong>the height with its longest width</strong>. But How to do this in one pass?</p><p>When we observe the graph above, the first height 2 can only have width 1. Because the right height is 1. It is easy to see 1 <strong>depend on</strong> the <strong>buckets height</strong>.</p><p>When we look at 1, its longest width is 6. <code>[2,1,5,6,2,3]</code>.</p><p>When we look at 5, its longest width is 2.  <code>5,6</code></p><p>When we look at 6, its longest width is 1.  <code>6</code></p><p>When we look at 2, its longest width is 4.  <code>5,6,2,3</code></p><p>When we look at 3, its longest width is 1.  <code>3</code></p><p>So if we want to get the <strong>longest width</strong>. We should find the <strong>bars whose height are lower than it !</strong>(both left bound and right bound).</p><p>For 2, we get left bound 1. So we get  the largest bucket for 2 <code>2</code> .</p><p>For 5, we get left bound 1, right bound 2. So we get  the largest bucket for 5 <code>5,6</code> .</p><p>For 6, we get left bound 5, right bound 2. So we get the largest bucket for 6 <code>6</code>.</p><p>For 2, we get left bound 1, right bound 0 (consider histgram[length] = 0). So we get the largest bucket for 2. <code>5,6,2,3</code></p><p>Now let's discuss how to <strong>get the bound</strong>.</p><p>Look at our requirement. One <strong>pass</strong>, <strong>get longest width for higher height</strong>.</p><p>As we analysize above, after getting 6's width, 6 is useless, it could be 5,6,7 whatever &gt;= 5.</p><p>After get 5's width, 5 is useless. Because we know that all the rest of height is smaller than 5.</p><p>So We could use <strong>stack</strong> of  ascendent order ( bottom to top )  to solve this problem.</p><h3>Stack Solution:</h3><p>In stack, I store index.</p><p>For corner case, I set <strong>leftmost</strong> and <strong>rightmost</strong> height as 0.</p><p>According to our analysis above, we just need to get higher height. So if the top of stack is smaller than the new height. We should push new height into stack.</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)</div><div class="line">  stack.push(i);</div></pre></td></tr></table></figure></p><p>Else, which means the current bucket's height can not  get longer width, we should pop top out and get its max Area. At this moment, we get the <strong>right bound</strong>.</p><p>What is its <strong>left bound</strong>? The <strong>current top</strong> of stack !</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> cur = stack.pop();</div><div class="line">maxArea = Math.max(maxArea,</div><div class="line">                   heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">i--;</div></pre></td></tr></table></figure></p><p>But we didn't push the right bound into stack, so we need current  i in next iteration. So  <code>i- -</code> .</p><p><strong>Code</strong>:</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line"><span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">        <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">        <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">            stack.push(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">              <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//栈中元素只会更大</span></div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">            <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">            <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">                <span class="comment">//停止条件就是 栈空时，遍历完全部。</span></div><div class="line">                <span class="comment">//此步骤是为了获得高度更高的木桶，为什么要得到高度更高的木桶呢?因为决定面积的是木桶高度和宽度。</span></div><div class="line">                <span class="comment">//我们在不断的得到更大的宽度的同时，要选择更好的木桶高度。如果是4 3 2 这种木桶</span></div><div class="line">                <span class="comment">//当我们无法以更高的高度作为高度时，例如4.那把4放在栈中就没有意义了。</span></div><div class="line">                <span class="comment">//遍历他也没用啊。以2作为高度，自然可以得到最大的面积。</span></div><div class="line">                <span class="comment">//因为后面的事情与他无关，不管你是6 7 8 还是多少也好，决定木桶高度的永远是小的那块木板。</span></div><div class="line">                <span class="comment">//若此时栈顶的高度小于要加入的高度，那么根据木桶理论。</span></div><div class="line">                <span class="comment">//前面的高度会失效，在失效前我们必须计算以他为高度的木桶面积。else部分</span></div><div class="line">                stack.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//此时栈顶是上一个比他小的元素的位置，即我们的木桶的左边界，i是我们木桶的右边界</span></div><div class="line">                <span class="comment">//那么计算木桶的宽度 i - top - 1。比较面积</span></div><div class="line">                <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">                <span class="comment">//这一步就是为了让此时的这个木板，再次去和栈顶进行比较，我们不能直接入栈。因为我们的栈是从小到大的。</span></div><div class="line">                <span class="comment">//即为了保证我们总能得到大的木桶高度。</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i == length怎么办? 我们在栈中剩余的，就是他可以达到的最大宽度的地方。即我们获得了栈的高度能保证的最大宽度！</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;84. Largest Rectangle in Histogram&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: http://www.geeksforgeeks.org/largest-rectangle-under-histogram/&lt;/
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode221</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode221/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode221/</id>
    <published>2017-11-19T17:55:32.000Z</published>
    <updated>2018-01-18T17:48:34.927Z</updated>
    
    <content type="html"><![CDATA[<h2>221. Maximal Square</h2><p><strong>Reference</strong>: https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution</p><p>Thanks jaqenhgar ! Really F**king Genius.</p><h3>1. Description:</h3><p>Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.</p><p>For example, given the following matrix:</p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure></p><p>Return 4.</p><p>&lt;!--more--&gt;</p><h3>2. Difficulty:</h3><p><strong>Medium</strong></p><h3>3. Relative Problems:</h3><p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">84.</span> Largest <span class="keyword">Rectangle</span> in <span class="keyword">Histogram</span></div><div class="line"><span class="number">85.</span> Maximal <span class="keyword">Rectangle</span></div></pre></td></tr></table></figure></p><h3>4. Solution:</h3><p>Input 2D <strong>matrix</strong>. Return int <strong>maxArea</strong>.</p><p>Main Idea: Dynamic Programming.</p><p>Cause it is a Dynamic Programming question, we should find the state equation.</p><p>So I create a 2D matrix <strong>edge</strong> to store the length of edge of square.(As the point is in the <strong>bottom right</strong>)</p><p>For an element which = 1, I consider it as a square which edge = 1.</p><p>To find a square, we need to check ( i, j - 1 ) , (i - 1, j) , (i - 1, j - 1).</p><p>If it is all 1, ? = 2.</p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">1</span></div><div class="line"><span class="symbol">1 </span>?</div></pre></td></tr></table></figure></p><p>If it is one element = 0 , ? = 1, we can not get a bigger square!</p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span></div><div class="line"><span class="symbol">1 </span>?</div></pre></td></tr></table></figure></p><p>If it is all 2, ? = 3.</p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> ?</div></pre></td></tr></table></figure></p><p>You could try this <strong>matrix</strong> to see whether you can get correct <strong>edge</strong>, and it would be much more clear for us to understand !</p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure></p><p>For such matrix, we could get <strong>edge</strong></p><p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure></p><h3>6. Code</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(matrix.length == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span>[][] edge = <span class="keyword">new</span> <span class="keyword">int</span>[matrix[<span class="number">0</span>].length + <span class="number">1</span>][matrix.length + <span class="number">1</span>];<span class="comment">//save length of edge</span></div><div class="line">  <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; edge.length; i++)&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; edge.length; j++)&#123;</div><div class="line">          <span class="keyword">if</span>(matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'1'</span>)&#123;</div><div class="line">              edge[i][j] = Math.min(Math.min(edge[i][j - <span class="number">1</span>],edge[i - <span class="number">1</span>][j]),edge[i - <span class="number">1</span>][j - <span class="number">1</span>])+<span class="number">1</span>;</div><div class="line">              <span class="comment">//if matrix[i - 1][j - 1] == 1,length at least = 1.</span></div><div class="line">              <span class="comment">//if left,top,top left is all 1. Then it must be a square which edge = 2!</span></div><div class="line">              <span class="comment">//if left,top,top left square edge is 2. Then it must be a square which edge = 3!</span></div><div class="line">              maxArea = (<span class="keyword">int</span>) Math.max(maxArea,Math.pow(edge[i][j],<span class="number">2</span>));</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;221. Maximal Square&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution&lt;/p&gt;
&lt;p&gt;T
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode121</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode121/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode121/</id>
    <published>2017-11-19T17:17:14.000Z</published>
    <updated>2017-11-22T02:51:58.007Z</updated>
    
    <content type="html"><![CDATA[<h1>121. Best Time to Buy and Sell Stock</h1><h3>1. Description：</h3><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p><strong>Example 1:</strong></p><p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 1, 5, 3, 6, 4]</div><div class="line"><span class="attribute">Output</span>: 5</div><div class="line"></div><div class="line"><span class="lsl">max. difference = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> (not <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, as selling price needs to be larger than buying price)</span></div></pre></td></tr></table></figure></p><p><strong>Example 2:</strong></p><p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 6, 4, 3, 1]</div><div class="line"><span class="attribute">Output</span>: 0</div><div class="line"></div><div class="line"><span class="livescript">In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="literal">no</span> transaction <span class="keyword">is</span> done, i.e. max profit = <span class="number">0.</span></span></div></pre></td></tr></table></figure></p><hr><p>&lt;!--more--&gt;</p><h3>2. Difficulty:</h3><p>Easy</p><h3>3.  Relative Problems:</h3><p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">122</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock II</div><div class="line"><span class="number">123</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock III</div><div class="line"><span class="number">188</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock IV</div><div class="line"><span class="number">309</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock with Cooldown</div></pre></td></tr></table></figure></p><h3>4. Solution:</h3><p><strong>Analysis</strong>:</p><p>( 1 ). We should find a day the stock price is lower than next day price.</p><p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">9</span> </div><div class="line">It <span class="keyword">is</span> impossible <span class="keyword">to</span> <span class="keyword">get</span> a higher profit <span class="keyword">if</span> you buy <span class="keyword">at</span> day1 <span class="keyword">and</span> sell <span class="keyword">at</span> day3 <span class="keyword">instead of</span> buying <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">2</span>, selling <span class="keyword">at</span> day3.</div></pre></td></tr></table></figure></p><p>( 2 ). If the profit &lt; 0. Choose a new day to buy.</p><p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">4</span> <span class="number">10</span></div><div class="line">It <span class="keyword">is</span> impossible <span class="keyword">to</span> <span class="keyword">get</span> a higher profit <span class="keyword">if</span> you buy <span class="keyword">at</span> day1 <span class="keyword">and</span> sell <span class="keyword">at</span> day4 <span class="keyword">or</span> day5.</div><div class="line">The best solution <span class="keyword">is</span> buy <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">3</span> sell <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">5.</span></div></pre></td></tr></table></figure></p><p><strong>Code</strong></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">   <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</div><div class="line">       cur = Math.max(<span class="number">0</span>,cur += prices[i] - prices[i - <span class="number">1</span>]);</div><div class="line">       maxProfit = Math.max(maxProfit,cur);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> maxProfit;</div></pre></td></tr></table></figure></p><p>It is also called Kadane's Algorithm.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;121. Best Time to Buy and Sell Stock&lt;/h1&gt;
&lt;h3&gt;1. Description：&lt;/h3&gt;
&lt;p&gt;Say you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the pr
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode32</title>
    <link href="https://hzjry123.github.io/2017/11/18/LeetCode32/"/>
    <id>https://hzjry123.github.io/2017/11/18/LeetCode32/</id>
    <published>2017-11-18T17:51:05.000Z</published>
    <updated>2017-11-22T02:52:05.294Z</updated>
    
    <content type="html"><![CDATA[<h1>32. Longest Valid Parentheses</h1><h3>1. Description：</h3><p>Given a string containing just the characters <code>'('</code> and <code>')'</code>, find the length of the longest valid (well-formed) parentheses substring.</p><p>For <code>&quot;(()&quot;</code>, the longest valid parentheses substring is <code>&quot;()&quot;</code>, which has length = 2.</p><p>Another example is <code>&quot;)()())&quot;</code>, where the longest valid parentheses substring is <code>&quot;()()&quot;</code>, which has length = 4.</p><p>&lt;!--more--&gt;</p><h3>2. Difficulty:</h3><p><strong>Hard</strong>(not that hard)</p><h3>3 .Some Tricky Test Case:</h3><p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">()()))))()()(</div><div class="line">()(())</div><div class="line">(()()))</div></pre></td></tr></table></figure></p><h3>4. Relative Problems:</h3><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">20. </span>Valid Parentheses (easy)</div><div class="line"><span class="bullet">22. </span>Generate Parentheses(Medium)Solutions:</div></pre></td></tr></table></figure></p><h3>5. Solution:</h3><p>Input: String <strong>s</strong>, return int <strong>longest</strong>.</p><p>(1). use <strong>stack</strong>：</p><p>​The <strong>main Idea</strong> is that we should put all the elements into stack, check whether there is a Valid Parenthese.</p><p>​if we get  <strong>s.charAt(i) == '('</strong> , we should put the <strong>index</strong>  into stack.</p><p>​if we get <strong>s.charAt(i) == ')'</strong>, we should check top of stack,</p><p>​if the top of the stack is (, pop it out. Everthing goes well, we get a Valid  Parentheses.</p><p>​But if the top of the stack is ), we should push the <strong>index</strong> into stack.</p><p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">e</span><span class="selector-class">.g</span>. : )()()).</div><div class="line">      <span class="selector-tag">Stack</span>(bottom to top): &#123;<span class="selector-tag">0</span>,<span class="selector-tag">5</span>&#125;</div><div class="line"><span class="selector-tag">e</span><span class="selector-class">.g</span>. : ()()))))()()(.</div><div class="line">true  Stack(bottom to top): &#123;<span class="selector-tag">4</span>,<span class="selector-tag">5</span>,<span class="selector-tag">6</span>,<span class="selector-tag">7</span>,<span class="selector-tag">12</span>&#125;.</div><div class="line">true  <span class="selector-tag">longest</span> <span class="selector-tag">is</span> <span class="selector-tag">4</span>. (<span class="number">12</span> - <span class="number">1</span>) <span class="selector-tag">-</span> <span class="selector-tag">7</span>.</div><div class="line">true   <span class="selector-tag">4</span>. (<span class="number">4</span> - <span class="number">1</span>) <span class="selector-tag">-</span> ?. <span class="selector-tag">So</span> <span class="selector-tag">I</span> <span class="selector-tag">set</span> <span class="keyword">when</span> the stack is empty. ? = -<span class="number">1</span>.</div></pre></td></tr></table></figure></p><p>​As we can see, we get all invalid elements index.</p><p>​If the stack is <strong>empty</strong>, just need to return <strong>s.length</strong>.</p><p>​If the stack is <strong>not</strong> <strong>empty</strong>, we need to get <strong>longest</strong> <strong>Valid</strong> <strong>Parenthese</strong>.</p><h3>6. Code:</h3><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; chars = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre = s.length();</div><div class="line">        <span class="comment">//push stack</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();i++)&#123;</div><div class="line">            <span class="comment">//check whether stack is empty.</span></div><div class="line">            <span class="keyword">if</span>(chars.empty()||s.charAt(i) == <span class="string">'('</span>)chars.push(i);<span class="comment">//empty or ( push</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(chars.peek()) == <span class="string">'('</span>)<span class="comment">// ) if top is ( pop out</span></div><div class="line">                chars.pop();</div><div class="line">            <span class="keyword">else</span> chars.push(i);<span class="comment">//if top is )</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(chars.empty()) <span class="keyword">return</span> s.length();</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//just a flag</span></div><div class="line">        <span class="keyword">while</span> (temp != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//若此时栈空了，那么说明此时的temp就是余下的( or ) return 他的位置，但逻辑就不统一了。</span></div><div class="line">            <span class="comment">//或者pop完 栈空，那么 他的位置就是长度。</span></div><div class="line">            <span class="comment">//else 他的位置长度 - 1 - 上一位。</span></div><div class="line">            temp = chars.empty() ? -<span class="number">1</span> : chars.pop();<span class="comment">//empty temp = -1</span></div><div class="line">            longest = longest &gt; (pre - <span class="number">1</span>) - temp ? longest : (pre - <span class="number">1</span>) - temp;</div><div class="line">            pre = temp;<span class="comment">//previous stack.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>(2).  Dynamic Programming:</p><p>​(()()))如果是（，len[i] = 0;如果是），如果上一个是（，则 len[i]=2    （1）如果上一个是），则要看i - len[i] - 1位的情况 (()())即此时最右边，你得看第5 - 4 - 1 = 0位的情况，    （2）如果是（，那么len[i] = len[i - 1] + 2;但如果是这种情况()(())，同时我们得看上上一位，即我们新加一个），i - len[i - 1] -2处也可以算入最长序列了。()()或者是这样，说明在（1),（2）两种情况时，都可以获得增长，因此我们最后都要加上len[i - len[i - 1] -2]。</p><p>​<strong>main</strong> idea: use array <strong>len</strong> to store length</p><p>​ if s[i] = '(', len = 0;</p><p>​ if s[i] = ')', len = the length of <strong>near</strong> Valid Parentheses.</p><p>​Analysis:</p><p>​if, left is '(', len <strong>at</strong> <strong>least</strong> = <strong>2</strong> , we still need to check <strong>s[i - 2]</strong>. just add len[i - 2].</p><p>​if, left is ')', we need to check <strong>i - len[i - 1] -1</strong>, jump to last invalid place to check whether we could get more. if s[i - len[i - 1] - 1] = (; we could get more!</p><p>​now len[i] = len[i - 1] + 2 + len[i - len[i - 1] - 2]</p><p>​<strong>check len[i - len[i - 1] - 2] to see whether we can get more!</strong></p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses_DP</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>[] len = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(s.charAt(i - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                max = Math.max(len[i],max);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> max;</div></pre></td></tr></table></figure></p><p>那么我们可以观察得到条件可以合并，i-1 == (不再重要，反正大家都要加2，而且i-1 == （，len【i-1】==0加不加无所谓</p><p>Try to observe the if condition, we can get a more concise version!</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>&amp;&amp;i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span>&amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>)</div><div class="line">&#123;</div><div class="line">  len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span> + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">  max = Math.max(len[i],max);</div><div class="line">&#125;<span class="comment">//对于这段程序的理解：如果加入的是)，那么要开始改变的。</span></div><div class="line"><span class="comment">// 我们要找上上个（，在且只可能在i - len[i - 1] - 1，如果是个（，那么长度可以+2</span></div><div class="line"><span class="comment">// 同时看看能不能变的更长。要看上上一个（左边的序列。</span></div></pre></td></tr></table></figure></p><p>​</p><p>​</p><p>​</p><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;32. Longest Valid Parentheses&lt;/h1&gt;
&lt;h3&gt;1. Description：&lt;/h3&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&#39;(&#39;&lt;/code&gt; and &lt;code&gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hzjry123.github.io/2017/01/20/hello-world/"/>
    <id>https://hzjry123.github.io/2017/01/20/hello-world/</id>
    <published>2017-01-20T17:05:22.000Z</published>
    <updated>2017-01-20T17:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2>Quick Start</h2><h3>Create a new post</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3>Run server</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3>Generate static files</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3>Deploy to remote sites</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
