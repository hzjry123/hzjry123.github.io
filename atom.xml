<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金若愚的blog</title>
  
  <subtitle>你好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hzjry123.github.io/"/>
  <updated>2018-02-16T07:07:42.827Z</updated>
  <id>https://hzjry123.github.io/</id>
  
  <author>
    <name>金若愚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>google cloud configuration</title>
    <link href="https://hzjry123.github.io/2018/02/15/google-cloud-configuration/"/>
    <id>https://hzjry123.github.io/2018/02/15/google-cloud-configuration/</id>
    <published>2018-02-15T17:28:32.000Z</published>
    <updated>2018-02-16T07:07:42.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置-免费使用谷歌云-Jupyter"><a href="#配置-免费使用谷歌云-Jupyter" class="headerlink" title="配置:免费使用谷歌云+Jupyter"></a>配置:免费使用谷歌云+Jupyter</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>最近学习了机器学习的算法基础，也实践过很多小数据的数据分析，因此对大数据的分析产生了兴趣，想部署一个spark集群去学习大数据，发现aws虽然免费但是挺坑的，只有1g memory。偶然了解到google cloud，听说google cloud给注册用户赠送有效期为一年的300刀抵用券，而且在google cloud上部署hadoop集群或者高性能机器都很方便。</p><p>jupyter notebook + pyspark: spark上提供了很多机器学习的算法，而且支持集群计算。加上jupyter notebook这种直观的可视化界面，更加方便。而且jupyter notebook作为一个web application，完全可以在google cloud上运行，将端口映射到本机后，用户则可以直接使用高性能集群上的jupyter notebook可以直接关注算法本身而不用去考虑集群的配置，可以说是数据分析的神器了。</p><h2 id="Google-cloud网页配置"><a href="#Google-cloud网页配置" class="headerlink" title="Google cloud网页配置"></a>Google cloud网页配置</h2><p>Google cloud基于google cloud sdk，可以下载cloud sdk在本机上使用命令<code>gcloud</code>，同时google cloud也提供了网页版的shell，也很方便。</p><p>推荐大家先在网页上注册google cloud，填写支付信息（必须有可以支付美元的信用卡）然后按照流程去走一遍（创建自己的instance，部署一个app，看谷歌炫技）。过程中会创建自己的project，记下id。</p><h3 id="下载google-cloud-sdk"><a href="#下载google-cloud-sdk" class="headerlink" title="下载google cloud sdk"></a>下载google cloud sdk</h3><p><a href="https://cloud.google.com/sdk/downloads" target="_blank" rel="external">https://cloud.google.com/sdk/downloads</a></p><p>按照网页上的步骤安装就可以了，十分方便。安装成功会让你登陆谷歌账号和配置一些instance的环境。</p><h2 id="配置集群和jupyter"><a href="#配置集群和jupyter" class="headerlink" title="配置集群和jupyter"></a>配置集群和jupyter</h2><p>这一步是在本机上执行</p><p>然后就可以配置你的hadoop cluster了。我推荐在本地的terminal里配置。输入如下命令（创建cluster并配置安装jupyter）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gcloud dataproc clusters create cluster-name \</div><div class="line">    --project project-id \</div><div class="line">    --master-machine-type n1-standard-2 \</div><div class="line">    --worker-machine-type n1-standard-2 \</div><div class="line">    --initialization-actions \</div><div class="line">        gs://dataproc-initialization-actions/jupyter/jupyter.sh</div></pre></td></tr></table></figure><p>其中\是换行标志，— 后面跟的是属性，在这里我标注了使用的Master和salve的型号，如果不标注则无法运行，（因为默认的配置会使你的钱包溢出了）。这里配置好了待会也可以去网页上更改配置，因为这里是500g的硬盘，一般用不了这么大。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gs:<span class="regexp">//</span>dataproc-initialization-actions<span class="regexp">/jupyter/</span>jupyter.sh</div></pre></td></tr></table></figure><p>gs：github shell，执行GitHub的shell，这是按照jupyter、anaconda和spark的脚本。</p><h3 id="Pip版本升级"><a href="#Pip版本升级" class="headerlink" title="Pip版本升级"></a>Pip版本升级</h3><p>这一步是在网页上的Master的shell里执行。（master的ssh）</p><p>pip是python里包下载工具，最好升级一下不然会出现很多怪错误。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">conda update pip</span></div></pre></td></tr></table></figure><h2 id="连接jupyter"><a href="#连接jupyter" class="headerlink" title="连接jupyter"></a>连接jupyter</h2><p>这一步确实有很多坑啊，参考了很多命令才得以使用。</p><h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>可以直接在google cloud的搜索栏里搜firewall rules。</p><p>再去里面创建firewall rules。填写如下配置</p><p><img src="/2018/02/15/google-cloud-configuration/fire_wall.detail.png" alt=""></p><p>其中的tcp:5000是声明通过ipv6连接cluster，同时这个5000也是我们启动jupyter的端口，接下来本机要通过映射去得到这个5000端口。</p><h3 id="jupyter的启动"><a href="#jupyter的启动" class="headerlink" title="jupyter的启动"></a>jupyter的启动</h3><p>这一步是在网页上的Master后ssh的terminal里执行。</p><p>对于jupyter的一些概念，在哪个路径下启动jupyter notebook，打开的默认位置就是那个路径。有点类似于先选定project的位置，再打开编译器。</p><p>我们最好不要直接在根目录下启动jupyter，会产生一些怪问题，最好是找到自己用户的路径然后自己mkdir一个路径去做jupyter，5000是刚设置的端口。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">jupyter</span><span class="literal">-</span><span class="comment">notebook</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">no</span><span class="literal">-</span><span class="comment">browser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port=5000</span></div></pre></td></tr></table></figure><p>会产生一个token给你，</p><h3 id="本地映射服务器端口"><a href="#本地映射服务器端口" class="headerlink" title="本地映射服务器端口"></a>本地映射服务器端口</h3><p>这一步是在本机terminal执行</p><p>在这一步确实会有很多幺蛾子。先说我的方法吧：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcloud compute ssh <span class="tag">&lt;<span class="name">master</span>&gt;</span> -- -L <span class="tag">&lt;<span class="name">your</span> <span class="attr">port</span>&gt;</span>:127.0.0.1:<span class="tag">&lt;<span class="name">jupyter</span> <span class="attr">port</span>&gt;</span> -N -n <span class="tag">&lt;<span class="name">master</span>&gt;</span></div></pre></td></tr></table></figure><p>example</p><p>我是映射到了本机的1024端口，这个是看心情的，只要那里没有端口占用就行了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gcloud</span> <span class="selector-tag">compute</span> <span class="selector-tag">ssh</span> <span class="selector-tag">tianchi-m</span> <span class="selector-tag">--</span> <span class="selector-tag">-L</span> 1024<span class="selector-pseudo">:127.0.0.1</span><span class="selector-pseudo">:5000</span> <span class="selector-tag">-N</span> <span class="selector-tag">-n</span> <span class="selector-tag">tianchi-m</span></div></pre></td></tr></table></figure><p>记得Master后面都跟一个-m的，也就是clustername-m。</p><p>然后登陆<code>localhost:1024</code>就可以看见我们的jupyter了。第一次登陆一般要输入token。在网页上的terminal里有，复制过来输入就好。</p><p><img src="/2018/02/15/google-cloud-configuration/token.png" alt=""></p><p>成功启动：</p><p><img src="/2018/02/15/google-cloud-configuration/jupyter.png" alt=""></p><p>官方的办法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcloud compute ssh cluster-name-m -- -L 1080:cluster-name-m:8088 -N -n</div></pre></td></tr></table></figure><p>这是我第一次成功的方法，但是自从我把cluster关了几天以后这办法就不行了。。</p><p>别的连接/参考方法链接:</p><p><a href="https://cloud.google.com/dataproc/docs/concepts/accessing/cluster-web-interfaces" target="_blank" rel="external">https://cloud.google.com/dataproc/docs/concepts/accessing/cluster-web-interfaces</a></p><p><a href="https://cloud.google.com/blog/big-data/2017/02/google-cloud-platform-for-data-scientists-using-jupyter-notebooks-with-apache-spark-on-google-cloud" target="_blank" rel="external">https://cloud.google.com/blog/big-data/2017/02/google-cloud-platform-for-data-scientists-using-jupyter-notebooks-with-apache-spark-on-google-cloud</a></p><p><a href="https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52" target="_blank" rel="external">https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置-免费使用谷歌云-Jupyter&quot;&gt;&lt;a href=&quot;#配置-免费使用谷歌云-Jupyter&quot; class=&quot;headerlink&quot; title=&quot;配置:免费使用谷歌云+Jupyter&quot;&gt;&lt;/a&gt;配置:免费使用谷歌云+Jupyter&lt;/h1&gt;&lt;h2 id=&quot;简
      
    
    </summary>
    
    
      <category term="google cloud" scheme="https://hzjry123.github.io/tags/google-cloud/"/>
    
  </entry>
  
  <entry>
    <title>GFS Reading Note</title>
    <link href="https://hzjry123.github.io/2018/02/03/GFS-Reading-Note/"/>
    <id>https://hzjry123.github.io/2018/02/03/GFS-Reading-Note/</id>
    <published>2018-02-03T18:26:40.000Z</published>
    <updated>2018-02-04T07:41:31.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GFS-阅读笔记"><a href="#GFS-阅读笔记" class="headerlink" title="GFS 阅读笔记"></a>GFS 阅读笔记</h1><p>GFS这篇paper可以说十分经典，在云计算课程上，老师要求我们去阅读这篇论文，由于GFS的篇幅很长、涵盖的面很多，我参考了网上许多的阅读笔记和原文，做了如下的记录和总结。</p><h2 id="1-GFS是什么？"><a href="#1-GFS是什么？" class="headerlink" title="1. GFS是什么？"></a>1. GFS是什么？</h2><p>GFS(Google File System)是一个大规模,具有高拓展性(scalable)的分布式系统，分布式集群是建立在大量的普通硬件上的，有很强的fault tolerance，能够响应大量的客户端。</p><a id="more"></a><h3 id="GFS设计需求"><a href="#GFS设计需求" class="headerlink" title="GFS设计需求"></a>GFS设计需求</h3><ol><li>建立在大量的便宜硬件上，因此必须有极强的监控、监测、恢复、容错机制</li><li>存储<strong>大</strong>数据(Multi-GB)</li><li>read操作: <ul><li>针对大文件, 流式读取连续文件. (100+KBs, 1MB or more)</li><li>针对小文件, 随机在不同的位置读取. (Few KBs)</li></ul></li><li>大的顺序写入多, 但是数据更改少.</li><li>高并发性(超多生产者, 超多消费者(同时从不同节点读文件))</li><li>保证高带宽(bandwidth)而非低延迟(大量用户注重读写速度而非响应时间)</li></ol><h3 id="GFS-API"><a href="#GFS-API" class="headerlink" title="GFS API"></a>GFS API</h3><p>Create, delete, open, close, read, write,record append(追加写), snapshot(文件快照)</p><h2 id="2-GFS架构"><a href="#2-GFS架构" class="headerlink" title="2. GFS架构"></a>2. GFS架构</h2><p>Single master, many chunkservers and clients.</p><p><img src="/2018/02/03/GFS-Reading-Note/Architecture.png" alt=""></p><h3 id="GFS特点概述"><a href="#GFS特点概述" class="headerlink" title="GFS特点概述"></a>GFS特点概述</h3><ul><li>文件按fix-size chunk存储, 每个chunk在创建时有一个不可改变的64位的标识符, 一个chunk有三个备份.</li><li>Master存储所有的 metadata, 其包括namespace, access control, 文件与chunk的mapping, chunk的位置.</li><li>Master管理chunk的lease, gc, migration. Master通过<em>HeatBeat</em>来向节点传递信息和节点的状态检查.</li><li>client向Master请求metadata操作chunk server</li><li>client和server都不缓存文件数据(保证数据一致性). 但client会缓存metadata</li></ul><h3 id="Single-Master"><a href="#Single-Master" class="headerlink" title="Single Master"></a>Single Master</h3><p>GFS为了简化设计, 在整个系统中只有一个Master, 为保证性能Master也不提供读写操作给client, 只通知在哪里读取。</p><p>e.g. Interaction for a simple read (Figure 1)</p><ol><li>client将应用程序请求的文件名、大小转换成chunk index, 然后将其擦混送给Master.</li><li>Master返回chunk handle和备份位置信息</li><li>Client将文件名和chunk index作为key, 返回信息作为value.</li><li>Client向备份之一的chunk server(一般是最近的)发送请求(chunk index, byte range)</li><li>在lease期限内, client都可以与chunkserver通信, 过期后要再向Master请求.(lease确实很厉害啊, 在后面会详细叙述)</li></ol><h3 id="Chunk-size"><a href="#Chunk-size" class="headerlink" title="Chunk size"></a>Chunk size</h3><p>64MB &gt;&gt; 一般文件系统块大小</p><p>Pros: </p><ul><li>减少client与Master交互(因为存在大量的连续存储, 因此大的块当然可以记录更多的信息)</li><li>client 可以在一个块上执行更多的操作, 减少了网络压力</li><li>减少了存储在Master上的Metadata的大小,这允许将Metadata存储在内存里</li></ul><p>Cons:</p><p>Hot Spot</p><ul><li>由于一个chunk可以存更多的小文件, 他的操作频率会变高,这会给chunk很大的压力(但是在实际中影响不大)</li><li>在批处理系统(batch-queue System)中, 一个chunk上的可执行文件要被许多client执行, overload啦. (解决办法是多加几个备份, 允许client去读别的client的文件)</li></ul><h3 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h3><p>元数据存储了三类信息:</p><ol><li>文件和chunk的命名空间</li><li>文件与chunk的映射关系</li><li>备份的位置</li></ol><p>我们知道metadata存储在内存里, 有很多的有点, 但是会不会受限于内存大小呢？实际上不会的, 每个metadata少于64kb又能记录64MB的chunk信息, 然后内存又便宜(谷歌部署不了大量的高性能服务器,还升级不了内存？)</p><h3 id="chunk的位置"><a href="#chunk的位置" class="headerlink" title="chunk的位置"></a>chunk的位置</h3><p>chunk的位置信息是定期通过heartbeat更新的, 这样减少了与chunkserver和Master时刻通信的代价。</p><p>当然每个chunkserver都有一个final word, 记录那些他有哪些chunk, 而哪些chunk又不在了.</p><h3 id="Operation-Log"><a href="#Operation-Log" class="headerlink" title="Operation Log"></a>Operation Log</h3><p>我们都知道log这种东西在任何系统里都是十分重要的, 在GFS也是, </p><ul><li>因为他是在gfs里唯一记录了所有metadata所有的信息的东西.</li><li>而且记录了操作的时间线, 这在回复过程中是十分关键的.</li></ul><p>checkpoint记录在一个类似B-Tree的结果里</p><h3 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h3><h5 id="这部分很重要"><a href="#这部分很重要" class="headerlink" title="这部分很重要"></a>这部分很重要</h5><p>如何保证：文件命名空间的变化是原子性的(atomic), 命名空间锁.</p><h5 id="GFS定义的概念："><a href="#GFS定义的概念：" class="headerlink" title="GFS定义的概念："></a>GFS定义的概念：</h5><ul><li>如果所有客户端从任意备份读取相同文件, 得到相同结果, 则改文件是一致的</li><li>defined: 如果一个文件区域在经过一系列操作之后依旧是一只的,并且所有客户端完全知道操作过程,。</li><li>如果一个操作没有被其他并发进程干扰, 那文件区域是defined的.</li><li>如果所有客户端没有知道一个并发操作的过程,但是该并发操作的结果是一致的,那么该文件区域是undefined的.</li><li>失败的并发操作不用说,是不一致的,操作的文件区域也是undefined的.</li></ul><h5 id="造成数据的改变："><a href="#造成数据的改变：" class="headerlink" title="造成数据的改变："></a>造成数据的改变：</h5><p>write and record append(no overwrite)</p><h5 id="GFS保证一致性的办法"><a href="#GFS保证一致性的办法" class="headerlink" title="GFS保证一致性的办法:"></a>GFS保证一致性的办法:</h5><ol><li><p>在所有备份机上执行相同的操作顺序.</p></li><li><p>使用chunk version来监测任何过期的备份, 过期的备份就被gc了</p><p>但如果不小心读取到了过期的呢?比如因为信息没被更新, 没事, 由于只有追加写, 大家差不多都一样麦。当收到Master的信息的时候,再去新的chunk也不迟</p></li><li><p>通过handshake来检查宕机的服务器(和heartbeat有什么不同呢？)</p></li><li><p>通过checksum来保证文件完整性。</p></li></ol><h2 id="3-系统交互"><a href="#3-系统交互" class="headerlink" title="3. 系统交互"></a>3. 系统交互</h2><p>在这一部分, 我们来看GFS为了保证让Master介入最少, 如何去设计client, Master和 chunkservers 之间交互, 以及数据修改, 原子操作和快照. </p><h5 id="Lease-and-Mutation-order"><a href="#Lease-and-Mutation-order" class="headerlink" title="Lease and Mutation order"></a>Lease and Mutation order</h5><p>定义:</p><p>Primary(主席):  Master(中央)把lease发给replica中的一个(被钦定), 然后改node就要开始选定一个执行顺序,让别的replicas一起执行. 每个lease60秒的有效期(time out), </p><h6 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h6><p>Q: 如果Master联系不到primary怎么办？</p><p>A: 在现有协议结束后,Master会钦定一个新的replica.</p><p>Q: 要是Master要停止这个操作怎么办? </p><p>A: 提前解约这个lease.</p><p><img src="/2018/02/03/GFS-Reading-Note/figure2.png" alt=""></p><p>过程解读:</p><ol><li>Client向Master请求持有的lease的chunk(primary replica)位置和其他replicas的位置. 如果没有主席, Master就钦定一个.</li><li>Master告知client主席的信息和replica的信息,然后client将信息缓存.(当primary无法通信或者primary replica没有lease了,client才会向Master再次请求)</li><li>client会把数据发送到所有的replicas,大家存在LRU缓存里.</li><li>在大家都收到数据之后,client会向primary发送写请求,primary给mutation分配序号(mutation可能来自不同的client),然后执行</li><li>primary发送给大家序号,大家也按序号执行.</li><li>告诉主席做完了</li><li>主席回复client完成的状态或者错误,client的error handler会重试失败的mutation.</li></ol><h3 id="Data-Flow"><a href="#Data-Flow" class="headerlink" title="Data Flow"></a>Data Flow</h3><p>设计目标:</p><ul><li>充分利用网络带宽(network bandwidth)</li><li>避免网络瓶颈和高延迟</li><li>减少数据流动的延迟</li></ul><p>设计方案:</p><ul><li>数据在chunkserver中线性流动(而非类似树的结构). 每个机器都在用自己的全部带宽与另外一个机器通信.</li><li>每个机器会把数据发送到还没收到数据且离自己最近的机器中(距离通过ip地址计算)</li><li>通过TCP连接将数据传输流水线化(pipelining),之所以如此有效是因为GFS使用全双工的交换网络(switched network with full-duplex links)</li></ul><h3 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h3><p>GFS通过snapshot来瞬间创建一个文件的备份或者一个目录树的备份, 应用了copy-on-write(在没有更改的时候,只用指针指向同样的文件)</p><p>当Master收到snapshot操作请求后:</p><ol><li>废除所有lease,暂停所有写操作.</li><li>Master记录所有操作,记录写入磁盘.</li><li>Master将源文件和目录树的metadata进行复制,这样之前的记录和当前内存中所保存的状态就对应起来了,新建的snapshot和源文件指向的会是同一个chunk</li></ol><h2 id="4-Master职责"><a href="#4-Master职责" class="headerlink" title="4. Master职责"></a>4. Master职责</h2><ul><li>执行所有关于namespace的操作</li><li>管理chunk replicas:<ul><li>做出chunk, replica放置决定</li><li>创建chunk, replica</li><li>协调各种活动, 保证chunk完全复制</li><li>负载均衡</li><li>回收闲置空间</li></ul></li></ul><h3 id="管理namespace"><a href="#管理namespace" class="headerlink" title="管理namespace"></a>管理namespace</h3><p>就是用读写锁来保证顺序执行。</p><h3 id="放置replicas"><a href="#放置replicas" class="headerlink" title="放置replicas"></a>放置replicas</h3><ul><li>最大化数据可靠性以及可用性</li><li>最大化带宽的利益</li></ul><p>要考虑到机架(rack)间的问题,将数据存放到不同的机架上,当一个机架宕机之后,别的机架还可以用.</p><p>这样对于一个chunk,可以利用多个机架的带宽,对于写的竞争,由于有好几个机架要去写,这样就达成了一个tradeoff！</p><h3 id="创建replica"><a href="#创建replica" class="headerlink" title="创建replica"></a>创建replica</h3><p>创建的三个情况:</p><ul><li>创建新的chunk</li><li>重新备份</li><li>重新负载均衡</li></ul><p>如何选择放到哪个机器？放置规则</p><ul><li>优先利用磁盘利用率低的chunkserver.</li><li>限制每个chunkserver的”recent” creations, 因为创建要写,而大量写会造成traffic, 降低效率, 这是我们不希望看见的.</li><li>跨机架进行放置</li></ul><p>当有多个chunk需要备份,要考虑优先级的问题:</p><ul><li>基于replication goal: 可用备份少的先.</li><li>活着的比最近删除的先.</li><li>阻塞client过程优先</li></ul><p>决定备份哪个之后, clone可用chunk到目标位置(遵循放置规则)</p><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>在GFS里,如果文件删除之后,GFS不会马上对其进行回收,而是要等待垃圾回收机制对其空间进行释放.这感觉是GFS的一个骚想法.为什么要这么做呢？在后面给出了部分的理由,看起来还是十分合理有效,开拓思路的.</p><p>GFS删除文件的策略:</p><ol><li>记录删除操作,将此文件命名为hidden+时间戳.</li><li>Master定期进行扫描,把隐藏了一段时间的空间回收, GFS设置为三天(这会产生问题,在后文会陈述)</li><li>在此期间,GFS可以对这个空间进行恢复, 改一个名字就好.</li><li>同时GC还会找到孤儿chunk(没有文件用到的非空chunk),然后清理该chunk的metadata.(比如创建一半失败了)</li><li>通过与chunkserver的心跳信息,每一个chunkserver会返回他有的chunk的子集,然后Master就会告诉chunkserver哪些是metadata都没有的.chunkserver就会对其进行删除（比如删除一半失败了）</li></ol><p>讨论：</p><p>分布式系统的删和回收是很复杂的, 但在GFS里, 我们有replica的mapping. 这就省了不少事. </p><p>pros: </p><ul><li>由于出错是很常见的, 这样的gc机制省了master不少的事情.</li><li>把空间回收和日常的handshakes结合起来, 分摊了开销, 而且这只是在master不忙的时候做, 优先级是低于回复client. 相比于删除GFS还有更重要的事情.</li><li>避免了意外删除、无法重现的删除的情况.</li></ul><p>cons: </p><ul><li>无法很好的去响应user对于空间的调整, 比如没什么空间了, 想删点东西, 但是发现删了没用.</li><li>有些程序删除和创建很频繁, 这导致他们没法马上使用他们删除的文件空间.</li></ul><p>解决办法:</p><p>​    缩短删除时间, 允许读者自己定义. 例如一些目录下的就没有备份, 迅速删除, 释放空间.</p><h5 id="过期replica监测"><a href="#过期replica监测" class="headerlink" title="过期replica监测"></a>过期replica监测</h5><p>过期原因: chunkserver宕机, mutation丢失.</p><p>监测办法: 赋予chunk version number.</p><p>当Master给出新的lease的时候,会增加版本号并通知replicas去更新版本号, Master和replicas都会记录新版本号. </p><ul><li>如果这是有一个replica不可用了, 那他的版本号自然就不好更新, 在chunkserver重启或者向Master报告的时候, Master就知道你过期了, 并用GC回收</li><li>如果是Master版本号落后, Master会更新自己的版本号.</li></ul><h2 id="5-高可用性"><a href="#5-高可用性" class="headerlink" title="5. 高可用性"></a>5. 高可用性</h2><p>在上百个GFS服务器里, 有些可能随时会不可用. GFS有两个策略: fast recovery和 replication</p><h3 id="Fast-Recovery"><a href="#Fast-Recovery" class="headerlink" title="Fast Recovery"></a>Fast Recovery</h3><p>不管是什么原因导致的宕机, 马上重启. GFS甚至不会去管是不是异常宕机.</p><h3 id="Chunk-Replication"><a href="#Chunk-Replication" class="headerlink" title="Chunk Replication"></a>Chunk Replication</h3><p>前面说过了</p><h3 id="Master-Replication"><a href="#Master-Replication" class="headerlink" title="Master Replication"></a>Master Replication</h3><p>虽然只有一个Master, 但是Master的log和checkpoint还是存储在多个机器上. </p><p>一个mutation只有在Master和他的备份们都记录了之后才被视作完成.</p><p>当Master宕机之后, 可以用他的备份去重启一个Master. 但是client怎么知道你是新Master呢? 首先新老Master的名字是一样的, 要改的只不过是DNS而已.</p><p>由于新Master只是shadow Master 不是热备份的镜像Master, 因此他们只提供读的权限！</p><p>后面就是性能测试了, 就没有再看下去. 吐槽一下这论文实在太夸张了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GFS-阅读笔记&quot;&gt;&lt;a href=&quot;#GFS-阅读笔记&quot; class=&quot;headerlink&quot; title=&quot;GFS 阅读笔记&quot;&gt;&lt;/a&gt;GFS 阅读笔记&lt;/h1&gt;&lt;p&gt;GFS这篇paper可以说十分经典，在云计算课程上，老师要求我们去阅读这篇论文，由于GFS的篇幅很长、涵盖的面很多，我参考了网上许多的阅读笔记和原文，做了如下的记录和总结。&lt;/p&gt;
&lt;h2 id=&quot;1-GFS是什么？&quot;&gt;&lt;a href=&quot;#1-GFS是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. GFS是什么？&quot;&gt;&lt;/a&gt;1. GFS是什么？&lt;/h2&gt;&lt;p&gt;GFS(Google File System)是一个大规模,具有高拓展性(scalable)的分布式系统，分布式集群是建立在大量的普通硬件上的，有很强的fault tolerance，能够响应大量的客户端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReadingNote" scheme="https://hzjry123.github.io/tags/ReadingNote/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的next主题无法显示latex公式</title>
    <link href="https://hzjry123.github.io/2018/01/18/%E5%85%B3%E4%BA%8Ehexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BAlatex%E5%85%AC%E5%BC%8F/"/>
    <id>https://hzjry123.github.io/2018/01/18/关于hexo的next主题无法显示latex公式/</id>
    <published>2018-01-18T11:50:41.000Z</published>
    <updated>2018-01-19T01:15:24.252Z</updated>
    
    <content type="html"><![CDATA[<p>reference: <a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#%E5%B0%8F%E7%BB%93" target="_blank" rel="external">http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#%E5%B0%8F%E7%BB%93</a></p><p>Thanks 林肯先生</p><p>在next里写latex时发现渲染不出来，查找后发现是说node.js的渲染和markdown渲染的问题。操作半天也不得行。</p><p>但我发现我是什么公式也渲染不出来啊！后来在next的issue里面查找相关问题，发现得先在/themes/next/_config.yml里把third-party-services settings中的math设置为enable</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>感觉被自己蠢到了。</p><p>但是这样设置以后还是不行，参考了”林肯先生”的做法。</p><ol><li><code>npm uninstall hexo-renderer-marked --save</code>//先删除原先的markdown渲染工具</li><li><code>npm install hexo-renderer-kramed --save</code>//安装新的markdown渲染工具</li></ol><p>由于markdown在渲染时”_ “会被认为是下划线，和latex下标的操作一样，会先渲染markdown的，导致latex无法渲染，因此要在里面加\把_转义，到这个时候才和”林肯先生”的问题一样，我有点震惊。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$R<span class="string">\_&#123;m</span> <span class="string">\times</span> n&#125; = U<span class="string">\_&#123;m</span> <span class="string">\times</span> m&#125; S<span class="string">\_&#123;m</span> <span class="string">\times</span> n&#125; V<span class="string">\_&#123;n</span> <span class="string">\times</span> n&#125;<span class="string">'$</span></div></pre></td></tr></table></figure><script type="math/tex; mode=display">R\_{m \times n} = U\_{m \times m} S\_{m \times n} V\_{n \times n}'</script><p>很强，但是能用了，饿死了先去吃饭了，如果有哪位朋友知道这该怎么办，请告诉我一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;reference: &lt;a href=&quot;http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://hzjry123.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Product subarray</title>
    <link href="https://hzjry123.github.io/2018/01/17/Maximum-Product-subarray/"/>
    <id>https://hzjry123.github.io/2018/01/17/Maximum-Product-subarray/</id>
    <published>2018-01-18T04:48:06.000Z</published>
    <updated>2018-01-19T00:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="152-Maximum-Product-SubaArray"><a href="#152-Maximum-Product-SubaArray" class="headerlink" title="152.Maximum-Product-SubaArray"></a>152.Maximum-Product-SubaArray</h1><h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a>1. Description:</h2><p>Find the contiguous subarray within an array (containing at least one number) which has the largest product.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given the array[<span class="number">2</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">4</span>]`,</div><div class="line"></div><div class="line">the contiguous subarray [<span class="number">2</span>,<span class="number">3</span>] has the largest product = <span class="number">6.</span></div></pre></td></tr></table></figure><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Medium</p><h3 id="3-Solution"><a href="#3-Solution" class="headerlink" title="3. Solution:"></a>3. Solution:</h3><a id="more"></a><p>It remains us of Maximum-Sum-SubArray, but it is more complicated</p><p>First I came up with a brute $O(n^2)$ solution.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = nums.length,max = nums[len - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span>[][] product = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</div><div class="line">        product[len - <span class="number">1</span>][len - <span class="number">1</span>] = nums[len - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            product[i][i] = nums[i];</div><div class="line">            max = Math.max(max,nums[i]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">                product[i][j] = nums[i] * product[i + <span class="number">1</span>][j];</div><div class="line">                max = Math.max(max,product[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>But it failed to pass OJ.</p><p>解法一：</p><p>Then I came up with another <strong>Dynamic Programming</strong> Solution.</p><p>我们知道在乘法中，只要乘数不包括0，那么结果在绝对值上也会变大，因此我们要追踪的是当前的最大以及最小值，这两者理论上都有可能在后面变成最大乘积。</p><p>参考Discuss上的一段话</p><blockquote><p>Besides keeping track of the largest product, we also need to keep track of the smallest product. Why? The smallest product, which is the largest in the negative sense could become the maximum when being multiplied by a negative number.</p></blockquote><p>但是我们要保证一点，就是在循环到nums[i]处时，当前步骤的最大值必须是受到nusm[i-1]影响的。在得到最大最小值时，我们要比较的是nums[i]和上一步的最大最小值的乘积以及当前nums[i].</p><p>因此在nums[i] &gt; 0时，我们可以得到转移方程:</p><script type="math/tex; mode=display">max[i] = Math.max(max[i - 1] * nums[i],nums[i])</script><script type="math/tex; mode=display">min[i] = Math.max(min[i-1]*nums[i],nums[i])</script><p>在nums[i] &lt; 0 时，我们可以得到转移方程</p><script type="math/tex; mode=display">max[i] = Math.max(min[i - 1] * nums[i],nums[i])</script><script type="math/tex; mode=display">min[i] = Math.max(max[i-1]*nums[i],nums[i])</script><p>在得到最后的最大值时只需遍历max数组即可。</p><p>在空间上优化：用变量max，min代替数组，每步都获得当前的最大值。</p><script type="math/tex; mode=display">cur\\_max =Math.max(cur\\_max,max)</script><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct_n</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>],max = res,min = res,len = nums.length;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</div><div class="line">            max = Math.max(nums[i] * max, nums[i]);</div><div class="line">            min = Math.min(nums[i] * min, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> temp = max;</div><div class="line">            max = Math.max(min * nums[i],nums[i]);</div><div class="line">            min = Math.min(temp * nums[i],nums[i]);</div><div class="line">        &#125;</div><div class="line">        res = Math.max(res,max);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解法二: </p><p>解法一代码简化。</p><p>从上一步我们可以看出，max和min的值是交换的。即在nums &lt;= 0的时候，max和min就会发生互换。因此我们可以加入一个判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(nums[i] =&lt; <span class="number">0</span>) swap(max,min);</div><div class="line"> max = Math.max(nums[i] * max, nums[i]);</div><div class="line">    min = Math.min(nums[i] * min, nums[i]);</div></pre></td></tr></table></figure><p>解法三:</p><p>由于是乘法，考虑没有0的情况，每加入一个新的数，乘积的绝对值都会变大，如果整个数组有n个负数</p><p>若n为偶，则subarray就是全部array。</p><p>若n为奇，则可以得到负数为偶数个的subarray来比较乘积</p><p>头尾是正，如[2,3,-4,1,2]  就是[2,3] 和 [1,2]的比较。</p><p>头尾是负，[-4,1,-2,3,-4]就是[-4,1,-2,3],[1,-2,3,-4]。</p><p>头是正[1,-1,-3,3,-2]就是[1,-1,-3,3]</p><p>尾是正[-1,-1,-3,3,2]就是[-1,-3,3,2]</p><p>由此其实可以直观感觉出，如果有最大值的话，那么最大值一定是会包括头或者尾的。</p><p>故可以遍历两边，从头遍历一遍，从尾遍历一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProduct_n</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>],len = nums.length,product = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">      product *= nums[i];</div><div class="line">        res = Math.max(res,product);</div><div class="line">      <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)product = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  product = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">      product *= nums[i];</div><div class="line">        res = Math.max(res,product);</div><div class="line">      <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)product = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;152-Maximum-Product-SubaArray&quot;&gt;&lt;a href=&quot;#152-Maximum-Product-SubaArray&quot; class=&quot;headerlink&quot; title=&quot;152.Maximum-Product-SubaArray&quot;&gt;&lt;/a&gt;152.Maximum-Product-SubaArray&lt;/h1&gt;&lt;h2 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;1. Description:&lt;/h2&gt;&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest product.&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;For example, given the array[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]`,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;the contiguous subarray [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] has the largest product = &lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Difficulty&quot;&gt;&lt;a href=&quot;#2-Difficulty&quot; class=&quot;headerlink&quot; title=&quot;2. Difficulty:&quot;&gt;&lt;/a&gt;2. Difficulty:&lt;/h3&gt;&lt;p&gt;Medium&lt;/p&gt;
&lt;h3 id=&quot;3-Solution&quot;&gt;&lt;a href=&quot;#3-Solution&quot; class=&quot;headerlink&quot; title=&quot;3. Solution:&quot;&gt;&lt;/a&gt;3. Solution:&lt;/h3&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
      <category term="DynamicProgramming" scheme="https://hzjry123.github.io/tags/DynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>461. Hamming Distance</title>
    <link href="https://hzjry123.github.io/2017/11/27/461-Hamming-Distance/"/>
    <id>https://hzjry123.github.io/2017/11/27/461-Hamming-Distance/</id>
    <published>2017-11-27T06:03:28.000Z</published>
    <updated>2018-01-18T17:46:14.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461. Hamming Distance"></a>461. Hamming Distance</h1><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a>1. Description:</h3><p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="external">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p><p><strong>Note:</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p><p><strong>Example:</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: x = 1, y = 4</div><div class="line"></div><div class="line"><span class="http"><span class="attribute">Output</span>: 2</span></div><div class="line"></div><div class="line"><span class="applescript">Explanation:</span></div><div class="line"><span class="number">1</span>   (<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</div><div class="line"><span class="number">4</span>   (<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">The <span class="keyword">above</span> arrows point <span class="keyword">to</span> positions <span class="keyword">where</span> <span class="keyword">the</span> corresponding bits are different.</div></pre></td></tr></table></figure><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Easy</p><h3 id="3-Solution"><a href="#3-Solution" class="headerlink" title="3. Solution:"></a>3. Solution:</h3><h4 id="bit-count"><a href="#bit-count" class="headerlink" title="bit count"></a>bit count</h4><p>What does come to your mind first when you see this sentence <code>&quot;corresponding bits are different&quot;</code>? Yes, <code>XOR</code>! Also, do not forget there is a decent function Java provided: <code>Integer.bitCount()</code> ~~~</p><p>But how does bitcount work?</p><p>Let us look at the source code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-2</span></div><div class="line"><span class="comment">//        java 逐位运算符</span></div><div class="line"><span class="comment">//        逐位或运算符(|),右移运算符(&gt;&gt;)非运算符(~) ,用0补足的右移运算符(&gt;&gt;&gt;)</span></div><div class="line">        i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div><div class="line">        i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>hex: 0x55555555, hex 5: 0101</p><p>binary: 101 0101 0101 0101 0101 0101 0101 0101</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div></pre></td></tr></table></figure><p>第一行是计算每两位中的 1 的个数 , 并且用该对应的两位来存储这个个数 ,<br>如 : 01101100 -&gt; 01011000 , 即先把前者每两位分段 01 10 11 00 , 分别有 1 1 2 0 个 1, 用两位二进制数表示为 01 01 10 00, 合起来为 01011000.</p><p>Count the number of 1 in every two digits, and use two digits to store it.</p><p>e.g. 01 10 11 00 store in 01 01 10 00.</p><p>By <code>(i &gt;&gt;&gt; 1)</code>  e.g. <code>01 10 &gt;&gt;&gt; 1</code> = <code>00 11</code> , <code>00 11 &amp; 0x5(01 01)</code> = <code>00 01</code> . We get the number of 1 in high digit in <code>01 10</code> . </p><ul><li>In first two digits<code>01</code>, the number of 1 in high digit is 0.</li></ul><ul><li>In second two digits<code>10</code>, the number of 1 in high digit is 1.</li></ul><p>Then how to get total number of every 2 digits?</p><p>All cases:</p><p> <code>11</code> , <code>i &gt;&gt;&gt; 1</code> = <code>1</code> , <code>1 &amp; 0101</code> = <code>1</code> . We suppose to get <code>10</code> . And  <code>11 - 1</code> = <code>10</code> .</p><p> <code>10</code> , <code>i &gt;&gt;&gt; 1</code> = <code>1</code> , <code>1 &amp; 0101</code> = <code>1</code> . We suppose to get <code>01</code> . And  <code>10 - 1</code> = <code>01</code> .</p><p> <code>01</code> , <code>i &gt;&gt;&gt; 1</code> = <code>0</code> , <code>0 &amp; 0101</code> = <code>0</code> . We suppose to get <code>01</code> . And  <code>01 - 0</code> = <code>01</code> .</p><p> <code>00</code> , <code>i &gt;&gt;&gt; 1</code> = <code>0</code> , <code>0 &amp; 0101</code> = <code>0</code> . We suppose to get <code>00</code> . And  <code>00 - 0</code> = <code>00</code> .</p><p>So <code>i - 00 01</code> = <code>01 10 - 00 01</code> = <code>01 10</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div></pre></td></tr></table></figure><p><code>0x33333333</code> = <code>0011 0011 0011…</code></p><p>第二行是计算每四位中的 1 的个数 , 并且用该对应的四位来存储这个个数 .<br>如 : 01101100 经过第一行计算后得 01011000 , 然后把 01011000 每四位分段成 0101 1000 , 段内移位相加 : 前段01+01 =10 , 后段 10+00=10, 分别用四位二进制数表示为 0010 0010, 合起来为 00100010 .</p><p>After counting every two digits. We should count every 4 digits.</p><p>It is quite same like count every two digits. Try it!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div></pre></td></tr></table></figure><p><code>0f0f0f0f</code> = <code>0000 1111 0000 1111 0000 1111</code></p><p>After count 4 digits. We count 8 digits.</p><p>We still check 16digits and 32 digits.</p><h3 id="other-solution1"><a href="#other-solution1" class="headerlink" title="other solution1:"></a>other solution1:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance_2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">//        对于一个正整数如果是偶数，该数的二进制数的最后一位是 0 ，</span></div><div class="line"><span class="comment">// 反之若是奇数，则该数的二进制数的最后一位是 1 。因此，可以考虑利用位移、判断奇偶来实现。</span></div><div class="line">        <span class="keyword">int</span> xor = x ^ y;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((xor &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            xor = xor &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h4 id="other-solution2"><a href="#other-solution2" class="headerlink" title="other solution2:"></a>other solution2:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance_3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">// 计算 1 的个数，若让算法的运算次数只与“ 1 ”的个数有关，那复杂度就能进一步降低。</span></div><div class="line"><span class="comment">// 思想： x &amp; (x-1) 可以消去 x 二进制数的最后一位 1</span></div><div class="line">        <span class="keyword">int</span> xor = x ^ y;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            xor &amp;= xor - <span class="number">1</span>;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><a href="http://15838341661-139-com.iteye.com/blog/1642525" target="_blank" rel="external">http://15838341661-139-com.iteye.com/blog/1642525</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;461-Hamming-Distance&quot;&gt;&lt;a href=&quot;#461-Hamming-Distance&quot; class=&quot;headerlink&quot; title=&quot;461. Hamming Distance&quot;&gt;&lt;/a&gt;461. Hamming Distance&lt;/h1&gt;&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;1. Description:&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot;&gt;Hamming distance&lt;/a&gt; between two integers is the number of positions at which the corresponding bits are different.&lt;/p&gt;
&lt;p&gt;Given two integers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, calculate the Hamming distance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;0 ≤ &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; &amp;lt; 231.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Input&lt;/span&gt;: x = 1, y = 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;http&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Output&lt;/span&gt;: 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;applescript&quot;&gt;Explanation:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       ↑   ↑&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The &lt;span class=&quot;keyword&quot;&gt;above&lt;/span&gt; arrows point &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; positions &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; corresponding bits are different.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Largest Rectangle in Histogram</title>
    <link href="https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/"/>
    <id>https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/</id>
    <published>2017-11-20T08:08:54.000Z</published>
    <updated>2017-11-22T02:52:20.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a>84. Largest Rectangle in Histogram</h1><p><strong>Reference</strong>: <a href="http://www.geeksforgeeks.org/largest-rectangle-under-histogram/" target="_blank" rel="external">http://www.geeksforgeeks.org/largest-rectangle-under-histogram/</a></p><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a><strong>1</strong>. Description:</h3><p>Given <em>n</em> non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p><p><img src="https://leetcode.com/static/images/problemset/histogram.png" alt="img"></p><p>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p><p><img src="https://leetcode.com/static/images/problemset/histogram_area.png" alt="img"></p><p>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Hard</p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3. Relative Problems"></a>3. Relative Problems</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">85. </span>Maximal Rectangle</div><div class="line"><span class="bullet">221. </span>Maximal Square</div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p><strong>Analysis</strong>: How to get a Largest Rectangle?  The problems sounds like buckets effect. The main idea is to find <strong>the height with its longest width</strong>. But How to do this in one pass?</p><p>When we observe the graph above, the first height 2 can only have width 1. Because the right height is 1. It is easy to see 1 <strong>depend on</strong> the <strong>buckets height</strong>. </p><p>When we look at 1, its longest width is 6. <code>[2,1,5,6,2,3]</code>.</p><p>When we look at 5, its longest width is 2.  <code>5,6</code></p><p>When we look at 6, its longest width is 1.  <code>6</code></p><p>When we look at 2, its longest width is 4.  <code>5,6,2,3</code> </p><p>When we look at 3, its longest width is 1.  <code>3</code> </p><p>So if we want to get the <strong>longest width</strong>. We should find the <strong>bars whose height are lower than it !</strong>(both left bound and right bound).</p><p>For 2, we get left bound 1. So we get  the largest bucket for 2 <code>2</code> .</p><p>For 5, we get left bound 1, right bound 2. So we get  the largest bucket for 5 <code>5,6</code> .</p><p>For 6, we get left bound 5, right bound 2. So we get the largest bucket for 6 <code>6</code>.</p><p>For 2, we get left bound 1, right bound 0 (consider histgram[length] = 0). So we get the largest bucket for 2. <code>5,6,2,3</code> </p><p>Now let’s discuss how to <strong>get the bound</strong>.</p><p>Look at our requirement. One <strong>pass</strong>, <strong>get longest width for higher height</strong>. </p><p>As we analysize above, after getting 6’s width, 6 is useless, it could be 5,6,7 whatever &gt;= 5. </p><p>After get 5’s width, 5 is useless. Because we know that all the rest of height is smaller than 5.</p><p>So We could use <strong>stack</strong> of  ascendent order ( bottom to top )  to solve this problem. </p><h3 id="Stack-Solution"><a href="#Stack-Solution" class="headerlink" title="Stack Solution:"></a>Stack Solution:</h3><p>In stack, I store index.</p><p>For corner case, I set <strong>leftmost</strong> and <strong>rightmost</strong> height as 0.</p><p>According to our analysis above, we just need to get higher height. So if the top of stack is smaller than the new height. We should push new height into stack. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)</div><div class="line">  stack.push(i);</div></pre></td></tr></table></figure><p>Else, which means the current bucket’s height can not  get longer width, we should pop top out and get its max Area. At this moment, we get the <strong>right bound</strong>. </p><p>What is its <strong>left bound</strong>? The <strong>current top</strong> of stack !</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> cur = stack.pop();</div><div class="line">maxArea = Math.max(maxArea,</div><div class="line">                   heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">i--;</div></pre></td></tr></table></figure><p>But we didn’t push the right bound into stack, so we need current  i in next iteration. So  <code>i- -</code> .</p><p><strong>Code</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line"><span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">        <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">        <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">            stack.push(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">              <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//栈中元素只会更大</span></div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">            <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">            <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">                <span class="comment">//停止条件就是 栈空时，遍历完全部。</span></div><div class="line">                <span class="comment">//此步骤是为了获得高度更高的木桶，为什么要得到高度更高的木桶呢?因为决定面积的是木桶高度和宽度。</span></div><div class="line">                <span class="comment">//我们在不断的得到更大的宽度的同时，要选择更好的木桶高度。如果是4 3 2 这种木桶</span></div><div class="line">                <span class="comment">//当我们无法以更高的高度作为高度时，例如4.那把4放在栈中就没有意义了。</span></div><div class="line">                <span class="comment">//遍历他也没用啊。以2作为高度，自然可以得到最大的面积。</span></div><div class="line">                <span class="comment">//因为后面的事情与他无关，不管你是6 7 8 还是多少也好，决定木桶高度的永远是小的那块木板。</span></div><div class="line">                <span class="comment">//若此时栈顶的高度小于要加入的高度，那么根据木桶理论。</span></div><div class="line">                <span class="comment">//前面的高度会失效，在失效前我们必须计算以他为高度的木桶面积。else部分</span></div><div class="line">                stack.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//此时栈顶是上一个比他小的元素的位置，即我们的木桶的左边界，i是我们木桶的右边界</span></div><div class="line">                <span class="comment">//那么计算木桶的宽度 i - top - 1。比较面积</span></div><div class="line">                <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">                <span class="comment">//这一步就是为了让此时的这个木板，再次去和栈顶进行比较，我们不能直接入栈。因为我们的栈是从小到大的。</span></div><div class="line">                <span class="comment">//即为了保证我们总能得到大的木桶高度。</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i == length怎么办? 我们在栈中剩余的，就是他可以达到的最大宽度的地方。即我们获得了栈的高度能保证的最大宽度！</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;84-Largest-Rectangle-in-Histogram&quot;&gt;&lt;a href=&quot;#84-Largest-Rectangle-in-Histogram&quot; class=&quot;headerlink&quot; title=&quot;84. Largest Rectangle in Histogram&quot;&gt;&lt;/a&gt;84. Largest Rectangle in Histogram&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;a href=&quot;http://www.geeksforgeeks.org/largest-rectangle-under-histogram/&quot;&gt;http://www.geeksforgeeks.org/largest-rectangle-under-histogram/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;&lt;strong&gt;1&lt;/strong&gt;. Description:&lt;/h3&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://leetcode.com/static/images/problemset/histogram.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;Above is a histogram where width of each bar is 1, given height = &lt;code&gt;[2,1,5,6,2,3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://leetcode.com/static/images/problemset/histogram_area.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;The largest rectangle is shown in the shaded area, which has area = &lt;code&gt;10&lt;/code&gt; unit.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode221</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode221/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode221/</id>
    <published>2017-11-19T17:55:32.000Z</published>
    <updated>2018-01-18T17:48:34.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a>221. Maximal Square</h2><p><strong>Reference</strong>: <a href="https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution</a></p><p>Thanks jaqenhgar ! Really F**king Genius.</p><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a>1. Description:</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p>For example, given the following matrix:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure><p>Return 4.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p><strong>Medium</strong></p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3. Relative Problems:"></a>3. Relative Problems:</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">84.</span> Largest <span class="keyword">Rectangle</span> in <span class="keyword">Histogram</span></div><div class="line"><span class="number">85.</span> Maximal <span class="keyword">Rectangle</span></div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p>Input 2D <strong>matrix</strong>. Return int <strong>maxArea</strong>.</p><p>Main Idea: Dynamic Programming.</p><p>Cause it is a Dynamic Programming question, we should find the state equation.</p><p>So I create a 2D matrix <strong>edge</strong> to store the length of edge of square.(As the point is in the <strong>bottom right</strong>)</p><p>For an element which = 1, I consider it as a square which edge = 1.</p><p>To find a square, we need to check ( i, j - 1 ) , (i - 1, j) , (i - 1, j - 1). </p><p>If it is all 1, ? = 2.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">1</span></div><div class="line"><span class="symbol">1 </span>?</div></pre></td></tr></table></figure><p>If it is one element = 0 , ? = 1, we can not get a bigger square!</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span></div><div class="line"><span class="symbol">1 </span>?</div></pre></td></tr></table></figure><p>If it is all 2, ? = 3.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> ?</div></pre></td></tr></table></figure><p>You could try this <strong>matrix</strong> to see whether you can get correct <strong>edge</strong>, and it would be much more clear for us to understand !</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure><p>For such matrix, we could get <strong>edge</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div></pre></td></tr></table></figure><h3 id="6-Code"><a href="#6-Code" class="headerlink" title="6. Code"></a>6. Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(matrix.length == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span>[][] edge = <span class="keyword">new</span> <span class="keyword">int</span>[matrix[<span class="number">0</span>].length + <span class="number">1</span>][matrix.length + <span class="number">1</span>];<span class="comment">//save length of edge</span></div><div class="line">  <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; edge.length; i++)&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; edge.length; j++)&#123;</div><div class="line">          <span class="keyword">if</span>(matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'1'</span>)&#123;</div><div class="line">              edge[i][j] = Math.min(Math.min(edge[i][j - <span class="number">1</span>],edge[i - <span class="number">1</span>][j]),edge[i - <span class="number">1</span>][j - <span class="number">1</span>])+<span class="number">1</span>;</div><div class="line">              <span class="comment">//if matrix[i - 1][j - 1] == 1,length at least = 1.</span></div><div class="line">              <span class="comment">//if left,top,top left is all 1. Then it must be a square which edge = 2!</span></div><div class="line">              <span class="comment">//if left,top,top left square edge is 2. Then it must be a square which edge = 3!</span></div><div class="line">              maxArea = (<span class="keyword">int</span>) Math.max(maxArea,Math.pow(edge[i][j],<span class="number">2</span>));</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;221-Maximal-Square&quot;&gt;&lt;a href=&quot;#221-Maximal-Square&quot; class=&quot;headerlink&quot; title=&quot;221. Maximal Square&quot;&gt;&lt;/a&gt;221. Maximal Square&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;a href=&quot;https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution&quot;&gt;https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks jaqenhgar ! Really F**king Genius.&lt;/p&gt;
&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;1. Description:&lt;/h3&gt;&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.&lt;/p&gt;
&lt;p&gt;For example, given the following matrix:&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Return 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode121</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode121/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode121/</id>
    <published>2017-11-19T17:17:14.000Z</published>
    <updated>2017-11-22T02:51:58.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a>121. Best Time to Buy and Sell Stock</h1><h3 id="1-Description："><a href="#1-Description：" class="headerlink" title="1. Description："></a>1. Description：</h3><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p><strong>Example 1:</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 1, 5, 3, 6, 4]</div><div class="line"><span class="attribute">Output</span>: 5</div><div class="line"></div><div class="line"><span class="lsl">max. difference = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> (not <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, as selling price needs to be larger than buying price)</span></div></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: [7, 6, 4, 3, 1]</div><div class="line"><span class="attribute">Output</span>: 0</div><div class="line"></div><div class="line"><span class="livescript">In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="literal">no</span> transaction <span class="keyword">is</span> done, i.e. max profit = <span class="number">0.</span></span></div></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Easy</p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3.  Relative Problems:"></a>3.  Relative Problems:</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">122</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock II</div><div class="line"><span class="number">123</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock III</div><div class="line"><span class="number">188</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock IV</div><div class="line"><span class="number">309</span>. <span class="keyword">Best </span>Time to <span class="keyword">Buy </span><span class="keyword">and </span><span class="keyword">Sell </span>Stock with Cooldown</div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p><strong>Analysis</strong>: </p><p>( 1 ). We should find a day the stock price is lower than next day price.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">9</span> </div><div class="line">It <span class="keyword">is</span> impossible <span class="keyword">to</span> <span class="keyword">get</span> a higher profit <span class="keyword">if</span> you buy <span class="keyword">at</span> day1 <span class="keyword">and</span> sell <span class="keyword">at</span> day3 <span class="keyword">instead of</span> buying <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">2</span>, selling <span class="keyword">at</span> day3.</div></pre></td></tr></table></figure><p> ( 2 ). If the profit &lt; 0. Choose a new day to buy.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">4</span> <span class="number">10</span></div><div class="line">It <span class="keyword">is</span> impossible <span class="keyword">to</span> <span class="keyword">get</span> a higher profit <span class="keyword">if</span> you buy <span class="keyword">at</span> day1 <span class="keyword">and</span> sell <span class="keyword">at</span> day4 <span class="keyword">or</span> day5.</div><div class="line">The best solution <span class="keyword">is</span> buy <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">3</span> sell <span class="keyword">at</span> <span class="built_in">day</span> <span class="number">5.</span></div></pre></td></tr></table></figure><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">   <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</div><div class="line">       cur = Math.max(<span class="number">0</span>,cur += prices[i] - prices[i - <span class="number">1</span>]);</div><div class="line">       maxProfit = Math.max(maxProfit,cur);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> maxProfit;</div></pre></td></tr></table></figure><p>It is also called Kadane’s Algorithm.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;121-Best-Time-to-Buy-and-Sell-Stock&quot;&gt;&lt;a href=&quot;#121-Best-Time-to-Buy-and-Sell-Stock&quot; class=&quot;headerlink&quot; title=&quot;121. Best Time to Buy and Sell Stock&quot;&gt;&lt;/a&gt;121. Best Time to Buy and Sell Stock&lt;/h1&gt;&lt;h3 id=&quot;1-Description：&quot;&gt;&lt;a href=&quot;#1-Description：&quot; class=&quot;headerlink&quot; title=&quot;1. Description：&quot;&gt;&lt;/a&gt;1. Description：&lt;/h3&gt;&lt;p&gt;Say you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Input&lt;/span&gt;: [7, 1, 5, 3, 6, 4]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Output&lt;/span&gt;: 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;lsl&quot;&gt;max. difference = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; (not &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, as selling price needs to be larger than buying price)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Input&lt;/span&gt;: [7, 6, 4, 3, 1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Output&lt;/span&gt;: 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;livescript&quot;&gt;In &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt; transaction &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; done, i.e. max profit = &lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode32</title>
    <link href="https://hzjry123.github.io/2017/11/18/LeetCode32/"/>
    <id>https://hzjry123.github.io/2017/11/18/LeetCode32/</id>
    <published>2017-11-18T17:51:05.000Z</published>
    <updated>2017-11-22T02:52:05.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="32-Longest-Valid-Parentheses"><a href="#32-Longest-Valid-Parentheses" class="headerlink" title="32. Longest Valid Parentheses"></a>32. Longest Valid Parentheses</h1><h3 id="1-Description："><a href="#1-Description：" class="headerlink" title="1. Description："></a>1. Description：</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><p>For <code>&quot;(()&quot;</code>, the longest valid parentheses substring is <code>&quot;()&quot;</code>, which has length = 2.</p><p>Another example is <code>&quot;)()())&quot;</code>, where the longest valid parentheses substring is <code>&quot;()()&quot;</code>, which has length = 4.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p><strong>Hard</strong>(not that hard)</p><h3 id="3-Some-Tricky-Test-Case"><a href="#3-Some-Tricky-Test-Case" class="headerlink" title="3 .Some Tricky Test Case:"></a>3 .Some Tricky Test Case:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">()()))))()()(</div><div class="line">()(())</div><div class="line">(()()))</div></pre></td></tr></table></figure><h3 id="4-Relative-Problems"><a href="#4-Relative-Problems" class="headerlink" title="4. Relative Problems:"></a>4. Relative Problems:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">20. </span>Valid Parentheses (easy)</div><div class="line"><span class="bullet">22. </span>Generate Parentheses(Medium)Solutions:</div></pre></td></tr></table></figure><h3 id="5-Solution"><a href="#5-Solution" class="headerlink" title="5. Solution:"></a>5. Solution:</h3><p>Input: String <strong>s</strong>, return int <strong>longest</strong>.</p><p>(1). use <strong>stack</strong>：</p><p>​    The <strong>main Idea</strong> is that we should put all the elements into stack, check whether there is a Valid Parenthese.</p><p>​    if we get  <strong>s.charAt(i) == ‘(‘</strong> , we should put the <strong>index</strong>  into stack.</p><p>​    if we get <strong>s.charAt(i) == ‘)’</strong>, we should check top of stack, </p><p>​    if the top of the stack is (, pop it out. Everthing goes well, we get a Valid          Parentheses. </p><p>​    But if the top of the stack is ), we should push the <strong>index</strong> into stack.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">e</span><span class="selector-class">.g</span>. : )()()).</div><div class="line">      <span class="selector-tag">Stack</span>(bottom to top): &#123;<span class="selector-tag">0</span>,<span class="selector-tag">5</span>&#125;</div><div class="line"><span class="selector-tag">e</span><span class="selector-class">.g</span>. : ()()))))()()(.</div><div class="line">true  Stack(bottom to top): &#123;<span class="selector-tag">4</span>,<span class="selector-tag">5</span>,<span class="selector-tag">6</span>,<span class="selector-tag">7</span>,<span class="selector-tag">12</span>&#125;.</div><div class="line">true  <span class="selector-tag">longest</span> <span class="selector-tag">is</span> <span class="selector-tag">4</span>. (<span class="number">12</span> - <span class="number">1</span>) <span class="selector-tag">-</span> <span class="selector-tag">7</span>.</div><div class="line">true   <span class="selector-tag">4</span>. (<span class="number">4</span> - <span class="number">1</span>) <span class="selector-tag">-</span> ?. <span class="selector-tag">So</span> <span class="selector-tag">I</span> <span class="selector-tag">set</span> <span class="keyword">when</span> the stack is empty. ? = -<span class="number">1</span>.</div></pre></td></tr></table></figure><p>​    As we can see, we get all invalid elements index.</p><p>​    If the stack is <strong>empty</strong>, just need to return <strong>s.length</strong>.</p><p>​    If the stack is <strong>not</strong> <strong>empty</strong>, we need to get <strong>longest</strong> <strong>Valid</strong> <strong>Parenthese</strong>.</p><h3 id="6-Code"><a href="#6-Code" class="headerlink" title="6. Code:"></a>6. Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; chars = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre = s.length();</div><div class="line">        <span class="comment">//push stack</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();i++)&#123;</div><div class="line">            <span class="comment">//check whether stack is empty.</span></div><div class="line">            <span class="keyword">if</span>(chars.empty()||s.charAt(i) == <span class="string">'('</span>)chars.push(i);<span class="comment">//empty or ( push</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(chars.peek()) == <span class="string">'('</span>)<span class="comment">// ) if top is ( pop out</span></div><div class="line">                chars.pop();</div><div class="line">            <span class="keyword">else</span> chars.push(i);<span class="comment">//if top is )</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(chars.empty()) <span class="keyword">return</span> s.length();</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//just a flag</span></div><div class="line">        <span class="keyword">while</span> (temp != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//若此时栈空了，那么说明此时的temp就是余下的( or ) return 他的位置，但逻辑就不统一了。</span></div><div class="line">            <span class="comment">//或者pop完 栈空，那么 他的位置就是长度。</span></div><div class="line">            <span class="comment">//else 他的位置长度 - 1 - 上一位。</span></div><div class="line">            temp = chars.empty() ? -<span class="number">1</span> : chars.pop();<span class="comment">//empty temp = -1</span></div><div class="line">            longest = longest &gt; (pre - <span class="number">1</span>) - temp ? longest : (pre - <span class="number">1</span>) - temp;</div><div class="line">            pre = temp;<span class="comment">//previous stack.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>(2).  Dynamic Programming:</p><p>​    (()()))如果是（，len[i] = 0;如果是），如果上一个是（，则 len[i]=2    （1）如果上一个是），则要看i - len[i] - 1位的情况 (()())即此时最右边，你得看第5 - 4 - 1 = 0位的情况，    （2）如果是（，那么len[i] = len[i - 1] + 2;但如果是这种情况()(())，同时我们得看上上一位，即我们新加一个），i - len[i - 1] -2处也可以算入最长序列了。()()或者是这样，说明在（1),（2）两种情况时，都可以获得增长，因此我们最后都要加上len[i - len[i - 1] -2]。</p><p>​    <strong>main</strong> idea: use array <strong>len</strong> to store length</p><p>​         if s[i] = ‘(‘, len = 0;</p><p>​         if s[i] = ‘)’, len = the length of <strong>near</strong> Valid Parentheses.</p><p>​    Analysis:         </p><p>​        if, left is ‘(‘, len <strong>at</strong> <strong>least</strong> = <strong>2</strong> , we still need to check <strong>s[i - 2]</strong>. just add len[i - 2]. </p><p>​        if, left is ‘)’, we need to check <strong>i - len[i - 1] -1</strong>, jump to last invalid place to check whether we could get more. if s[i - len[i - 1] - 1] = (; we could get more! </p><p>​        now len[i] = len[i - 1] + 2 + len[i - len[i - 1] - 2]</p><p>​        <strong>check len[i - len[i - 1] - 2] to see whether we can get more!</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses_DP</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>[] len = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(s.charAt(i - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                max = Math.max(len[i],max);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> max;</div></pre></td></tr></table></figure><p>那么我们可以观察得到条件可以合并，i-1 == (不再重要，反正大家都要加2，而且i-1 == （，len【i-1】==0加不加无所谓</p><p>Try to observe the if condition, we can get a more concise version!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>&amp;&amp;i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span>&amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>)</div><div class="line">&#123;</div><div class="line">  len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span> + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">  max = Math.max(len[i],max);</div><div class="line">&#125;<span class="comment">//对于这段程序的理解：如果加入的是)，那么要开始改变的。</span></div><div class="line"><span class="comment">// 我们要找上上个（，在且只可能在i - len[i - 1] - 1，如果是个（，那么长度可以+2</span></div><div class="line"><span class="comment">// 同时看看能不能变的更长。要看上上一个（左边的序列。</span></div></pre></td></tr></table></figure><p>​</p><p>​</p><p>​</p><p>​     </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;32-Longest-Valid-Parentheses&quot;&gt;&lt;a href=&quot;#32-Longest-Valid-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;32. Longest Valid Parentheses&quot;&gt;&lt;/a&gt;32. Longest Valid Parentheses&lt;/h1&gt;&lt;h3 id=&quot;1-Description：&quot;&gt;&lt;a href=&quot;#1-Description：&quot; class=&quot;headerlink&quot; title=&quot;1. Description：&quot;&gt;&lt;/a&gt;1. Description：&lt;/h3&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;&amp;quot;(()&amp;quot;&lt;/code&gt;, the longest valid parentheses substring is &lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;, which has length = 2.&lt;/p&gt;
&lt;p&gt;Another example is &lt;code&gt;&amp;quot;)()())&amp;quot;&lt;/code&gt;, where the longest valid parentheses substring is &lt;code&gt;&amp;quot;()()&amp;quot;&lt;/code&gt;, which has length = 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hzjry123.github.io/2017/01/20/hello-world/"/>
    <id>https://hzjry123.github.io/2017/01/20/hello-world/</id>
    <published>2017-01-20T17:05:22.000Z</published>
    <updated>2017-01-20T17:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
