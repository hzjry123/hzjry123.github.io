<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金若愚的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hzjry123.github.io/"/>
  <updated>2017-11-22T02:52:20.616Z</updated>
  <id>https://hzjry123.github.io/</id>
  
  <author>
    <name>金若愚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Largest Rectangle in Histogram</title>
    <link href="https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/"/>
    <id>https://hzjry123.github.io/2017/11/20/Largest-Rectangle-in-Histogram/</id>
    <published>2017-11-20T08:08:54.000Z</published>
    <updated>2017-11-22T02:52:20.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a>84. Largest Rectangle in Histogram</h1><p><strong>Reference</strong>: <a href="http://www.geeksforgeeks.org/largest-rectangle-under-histogram/" target="_blank" rel="external">http://www.geeksforgeeks.org/largest-rectangle-under-histogram/</a></p><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a><strong>1</strong>. Description:</h3><p>Given <em>n</em> non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p><p><img src="https://leetcode.com/static/images/problemset/histogram.png" alt="img"></p><p>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p><p><img src="https://leetcode.com/static/images/problemset/histogram_area.png" alt="img"></p><p>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Hard</p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3. Relative Problems"></a>3. Relative Problems</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">85. Maximal Rectangle</div><div class="line">221. Maximal Square</div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p><strong>Analysis</strong>: How to get a Largest Rectangle?  The problems sounds like buckets effect. The main idea is to find <strong>the height with its longest width</strong>. But How to do this in one pass?</p><p>When we observe the graph above, the first height 2 can only have width 1. Because the right height is 1. It is easy to see 1 <strong>depend on</strong> the <strong>buckets height</strong>. </p><p>When we look at 1, its longest width is 6. <code>[2,1,5,6,2,3]</code>.</p><p>When we look at 5, its longest width is 2.  <code>5,6</code></p><p>When we look at 6, its longest width is 1.  <code>6</code></p><p>When we look at 2, its longest width is 4.  <code>5,6,2,3</code> </p><p>When we look at 3, its longest width is 1.  <code>3</code> </p><p>So if we want to get the <strong>longest width</strong>. We should find the <strong>bars whose height are lower than it !</strong>(both left bound and right bound).</p><p>For 2, we get left bound 1. So we get  the largest bucket for 2 <code>2</code> .</p><p>For 5, we get left bound 1, right bound 2. So we get  the largest bucket for 5 <code>5,6</code> .</p><p>For 6, we get left bound 5, right bound 2. So we get the largest bucket for 6 <code>6</code>.</p><p>For 2, we get left bound 1, right bound 0 (consider histgram[length] = 0). So we get the largest bucket for 2. <code>5,6,2,3</code> </p><p>Now let’s discuss how to <strong>get the bound</strong>.</p><p>Look at our requirement. One <strong>pass</strong>, <strong>get longest width for higher height</strong>. </p><p>As we analysize above, after getting 6’s width, 6 is useless, it could be 5,6,7 whatever &gt;= 5. </p><p>After get 5’s width, 5 is useless. Because we know that all the rest of height is smaller than 5.</p><p>So We could use <strong>stack</strong> of  ascendent order ( bottom to top )  to solve this problem. </p><h3 id="Stack-Solution"><a href="#Stack-Solution" class="headerlink" title="Stack Solution:"></a>Stack Solution:</h3><p>In stack, I store index.</p><p>For corner case, I set <strong>leftmost</strong> and <strong>rightmost</strong> height as 0.</p><p>According to our analysis above, we just need to get higher height. So if the top of stack is smaller than the new height. We should push new height into stack. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)</div><div class="line">  stack.push(i);</div></pre></td></tr></table></figure><p>Else, which means the current bucket’s height can not  get longer width, we should pop top out and get its max Area. At this moment, we get the <strong>right bound</strong>. </p><p>What is its <strong>left bound</strong>? The <strong>current top</strong> of stack !</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> cur = stack.pop();</div><div class="line">maxArea = Math.max(maxArea,</div><div class="line">                   heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">i--;</div></pre></td></tr></table></figure><p>But we didn’t push the right bound into stack, so we need current  i in next iteration. So  <code>i- -</code> .</p><p><strong>Code</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line"><span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">        <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">        <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">            stack.push(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">              <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//栈中元素只会更大</span></div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</div><div class="line">            <span class="keyword">int</span> h = i == heights.length? <span class="number">0</span> : heights[i];</div><div class="line">            <span class="keyword">if</span>(stack.empty() || heights[stack.peek()] &lt;= h)&#123;</div><div class="line">                <span class="comment">//停止条件就是 栈空时，遍历完全部。</span></div><div class="line">                <span class="comment">//此步骤是为了获得高度更高的木桶，为什么要得到高度更高的木桶呢?因为决定面积的是木桶高度和宽度。</span></div><div class="line">                <span class="comment">//我们在不断的得到更大的宽度的同时，要选择更好的木桶高度。如果是4 3 2 这种木桶</span></div><div class="line">                <span class="comment">//当我们无法以更高的高度作为高度时，例如4.那把4放在栈中就没有意义了。</span></div><div class="line">                <span class="comment">//遍历他也没用啊。以2作为高度，自然可以得到最大的面积。</span></div><div class="line">                <span class="comment">//因为后面的事情与他无关，不管你是6 7 8 还是多少也好，决定木桶高度的永远是小的那块木板。</span></div><div class="line">                <span class="comment">//若此时栈顶的高度小于要加入的高度，那么根据木桶理论。</span></div><div class="line">                <span class="comment">//前面的高度会失效，在失效前我们必须计算以他为高度的木桶面积。else部分</span></div><div class="line">                stack.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//此时栈顶是上一个比他小的元素的位置，即我们的木桶的左边界，i是我们木桶的右边界</span></div><div class="line">                <span class="comment">//那么计算木桶的宽度 i - top - 1。比较面积</span></div><div class="line">                <span class="keyword">int</span> cur = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea,</div><div class="line">                        heights[cur] * (stack.empty()? i :(i - stack.peek() - <span class="number">1</span>)));</div><div class="line">                i--;</div><div class="line">                <span class="comment">//这一步就是为了让此时的这个木板，再次去和栈顶进行比较，我们不能直接入栈。因为我们的栈是从小到大的。</span></div><div class="line">                <span class="comment">//即为了保证我们总能得到大的木桶高度。</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i == length怎么办? 我们在栈中剩余的，就是他可以达到的最大宽度的地方。即我们获得了栈的高度能保证的最大宽度！</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;84-Largest-Rectangle-in-Histogram&quot;&gt;&lt;a href=&quot;#84-Largest-Rectangle-in-Histogram&quot; class=&quot;headerlink&quot; title=&quot;84. Largest Rectangle in Histogram&quot;&gt;&lt;/a&gt;84. Largest Rectangle in Histogram&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;a href=&quot;http://www.geeksforgeeks.org/largest-rectangle-under-histogram/&quot;&gt;http://www.geeksforgeeks.org/largest-rectangle-under-histogram/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;&lt;strong&gt;1&lt;/strong&gt;. Description:&lt;/h3&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://leetcode.com/static/images/problemset/histogram.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;Above is a histogram where width of each bar is 1, given height = &lt;code&gt;[2,1,5,6,2,3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://leetcode.com/static/images/problemset/histogram_area.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;The largest rectangle is shown in the shaded area, which has area = &lt;code&gt;10&lt;/code&gt; unit.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode221</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode221/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode221/</id>
    <published>2017-11-19T17:55:32.000Z</published>
    <updated>2017-11-22T02:52:28.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a>221. Maximal Square</h2><p><strong>Reference</strong>: <a href="https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution</a></p><p>Thanks jaqenhgar ! Really Fucking Genius.</p><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description:"></a>1. Description:</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p>For example, given the following matrix:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 0 1 0 0</div><div class="line">1 0 1 1 1</div><div class="line">1 1 1 1 1</div><div class="line">1 0 0 1 0</div></pre></td></tr></table></figure><p>Return 4.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p><strong>Medium</strong></p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3. Relative Problems:"></a>3. Relative Problems:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">84. Largest Rectangle in Histogram</div><div class="line">85. Maximal Rectangle</div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p>Input 2D <strong>matrix</strong>. Return int <strong>maxArea</strong>.</p><p>Main Idea: Dynamic Programming.</p><p>Cause it is a Dynamic Programming question, we should find the state equation.</p><p>So I create a 2D matrix <strong>edge</strong> to store the length of edge of square.(As the point is in the <strong>bottom right</strong>)</p><p>For an element which = 1, I consider it as a square which edge = 1.</p><p>To find a square, we need to check ( i, j - 1 ) , (i - 1, j) , (i - 1, j - 1). </p><p>If it is all 1, ? = 2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 1</div><div class="line">1 ?</div></pre></td></tr></table></figure><p>If it is one element = 0 , ? = 1, we can not get a bigger square!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 0</div><div class="line">1 ?</div></pre></td></tr></table></figure><p>If it is all 2, ? = 3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 1 1</div><div class="line">1 2 2</div><div class="line">1 2 ?</div></pre></td></tr></table></figure><p>You could try this <strong>matrix</strong> to see whether you can get correct <strong>edge</strong>, and it would be much more clear for us to understand !</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 0 1 0 0</div><div class="line">1 0 1 1 1</div><div class="line">1 1 1 1 1</div><div class="line">1 0 0 1 0</div></pre></td></tr></table></figure><p>For such matrix, we could get <strong>edge</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 0 0 0 0 0</div><div class="line">0 1 0 1 0 0</div><div class="line">0 1 0 1 1 1</div><div class="line">0 1 1 1 2 1</div><div class="line">0 1 0 0 1 0</div></pre></td></tr></table></figure><h3 id="6-Code"><a href="#6-Code" class="headerlink" title="6. Code"></a>6. Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(matrix.length == <span class="number">0</span>)</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>[][] edge = <span class="keyword">new</span> <span class="keyword">int</span>[matrix[<span class="number">0</span>].length + <span class="number">1</span>][matrix.length + <span class="number">1</span>];<span class="comment">//save length of edge</span></div><div class="line"><span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; edge.length; i++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; edge.length; j++)&#123;</div><div class="line">        <span class="keyword">if</span>(matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'1'</span>)&#123;</div><div class="line">            edge[i][j] = Math.min(Math.min(edge[i][j - <span class="number">1</span>],edge[i - <span class="number">1</span>][j]),edge[i - <span class="number">1</span>][j - <span class="number">1</span>])+<span class="number">1</span>;</div><div class="line">            <span class="comment">//if matrix[i - 1][j - 1] == 1,length at least = 1.</span></div><div class="line">            <span class="comment">//if left,top,top left is all 1. Then it must be a square which edge = 2!</span></div><div class="line">            <span class="comment">//if left,top,top left square edge is 2. Then it must be a square which edge = 3!</span></div><div class="line">            maxArea = (<span class="keyword">int</span>) Math.max(maxArea,Math.pow(edge[i][j],<span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> maxArea;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;221-Maximal-Square&quot;&gt;&lt;a href=&quot;#221-Maximal-Square&quot; class=&quot;headerlink&quot; title=&quot;221. Maximal Square&quot;&gt;&lt;/a&gt;221. Maximal Square&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;: &lt;a href=&quot;https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution&quot;&gt;https://discuss.leetcode.com/topic/20801/extremely-simple-java-solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks jaqenhgar ! Really Fucking Genius.&lt;/p&gt;
&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description:&quot;&gt;&lt;/a&gt;1. Description:&lt;/h3&gt;&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.&lt;/p&gt;
&lt;p&gt;For example, given the following matrix:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1 0 1 0 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 0 1 1 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 1 1 1 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 0 0 1 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Return 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode121</title>
    <link href="https://hzjry123.github.io/2017/11/19/LeetCode121/"/>
    <id>https://hzjry123.github.io/2017/11/19/LeetCode121/</id>
    <published>2017-11-19T17:17:14.000Z</published>
    <updated>2017-11-22T02:51:58.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a>121. Best Time to Buy and Sell Stock</h1><h3 id="1-Description："><a href="#1-Description：" class="headerlink" title="1. Description："></a>1. Description：</h3><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 1, 5, 3, 6, 4]</div><div class="line">Output: 5</div><div class="line"></div><div class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 6, 4, 3, 1]</div><div class="line">Output: 0</div><div class="line"></div><div class="line">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p>Easy</p><h3 id="3-Relative-Problems"><a href="#3-Relative-Problems" class="headerlink" title="3.  Relative Problems:"></a>3.  Relative Problems:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">122. Best Time to Buy and Sell Stock II</div><div class="line">123. Best Time to Buy and Sell Stock III</div><div class="line">188. Best Time to Buy and Sell Stock IV</div><div class="line">309. Best Time to Buy and Sell Stock with Cooldown</div></pre></td></tr></table></figure><h3 id="4-Solution"><a href="#4-Solution" class="headerlink" title="4. Solution:"></a>4. Solution:</h3><p><strong>Analysis</strong>: </p><p>( 1 ). We should find a day the stock price is lower than next day price.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line">8 1 9 </div><div class="line">It is impossible to get a higher profit if you buy at day1 and sell at day3 instead of buying at day 2, selling at day3.</div></pre></td></tr></table></figure><p> ( 2 ). If the profit &lt; 0. Choose a new day to buy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">e.g.:</div><div class="line">2 6 1 4 10</div><div class="line">It is impossible to get a higher profit if you buy at day1 and sell at day4 or day5.</div><div class="line">The best solution is buy at day 3 sell at day 5.</div></pre></td></tr></table></figure><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">   <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</div><div class="line">       cur = Math.max(<span class="number">0</span>,cur += prices[i] - prices[i - <span class="number">1</span>]);</div><div class="line">       maxProfit = Math.max(maxProfit,cur);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> maxProfit;</div></pre></td></tr></table></figure><p>It is also called Kadane’s Algorithm.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;121-Best-Time-to-Buy-and-Sell-Stock&quot;&gt;&lt;a href=&quot;#121-Best-Time-to-Buy-and-Sell-Stock&quot; class=&quot;headerlink&quot; title=&quot;121. Best Time to Buy and Sell Stock&quot;&gt;&lt;/a&gt;121. Best Time to Buy and Sell Stock&lt;/h1&gt;&lt;h3 id=&quot;1-Description：&quot;&gt;&lt;a href=&quot;#1-Description：&quot; class=&quot;headerlink&quot; title=&quot;1. Description：&quot;&gt;&lt;/a&gt;1. Description：&lt;/h3&gt;&lt;p&gt;Say you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Input: [7, 1, 5, 3, 6, 4]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Output: 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Input: [7, 6, 4, 3, 1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Output: 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In this case, no transaction is done, i.e. max profit = 0.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode32</title>
    <link href="https://hzjry123.github.io/2017/11/18/LeetCode32/"/>
    <id>https://hzjry123.github.io/2017/11/18/LeetCode32/</id>
    <published>2017-11-18T17:51:05.000Z</published>
    <updated>2017-11-22T02:52:05.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="32-Longest-Valid-Parentheses"><a href="#32-Longest-Valid-Parentheses" class="headerlink" title="32. Longest Valid Parentheses"></a>32. Longest Valid Parentheses</h1><h3 id="1-Description："><a href="#1-Description：" class="headerlink" title="1. Description："></a>1. Description：</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><p>For <code>&quot;(()&quot;</code>, the longest valid parentheses substring is <code>&quot;()&quot;</code>, which has length = 2.</p><p>Another example is <code>&quot;)()())&quot;</code>, where the longest valid parentheses substring is <code>&quot;()()&quot;</code>, which has length = 4.</p><a id="more"></a><h3 id="2-Difficulty"><a href="#2-Difficulty" class="headerlink" title="2. Difficulty:"></a>2. Difficulty:</h3><p><strong>Hard</strong>(not that hard)</p><h3 id="3-Some-Tricky-Test-Case"><a href="#3-Some-Tricky-Test-Case" class="headerlink" title="3 .Some Tricky Test Case:"></a>3 .Some Tricky Test Case:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">()()))))()()(</div><div class="line">()(())</div><div class="line">(()()))</div></pre></td></tr></table></figure><h3 id="4-Relative-Problems"><a href="#4-Relative-Problems" class="headerlink" title="4. Relative Problems:"></a>4. Relative Problems:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">20. Valid Parentheses (easy)</div><div class="line">22. Generate Parentheses(Medium)Solutions:</div></pre></td></tr></table></figure><h3 id="5-Solution"><a href="#5-Solution" class="headerlink" title="5. Solution:"></a>5. Solution:</h3><p>Input: String <strong>s</strong>, return int <strong>longest</strong>.</p><p>(1). use <strong>stack</strong>：</p><p>​    The <strong>main Idea</strong> is that we should put all the elements into stack, check whether there is a Valid Parenthese.</p><p>​    if we get  <strong>s.charAt(i) == ‘(‘</strong> , we should put the <strong>index</strong>  into stack.</p><p>​    if we get <strong>s.charAt(i) == ‘)’</strong>, we should check top of stack, </p><p>​    if the top of the stack is (, pop it out. Everthing goes well, we get a Valid          Parentheses. </p><p>​    But if the top of the stack is ), we should push the <strong>index</strong> into stack.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">e.g. : )()()).</div><div class="line">      Stack(bottom to top): &#123;0,5&#125;</div><div class="line">e.g. : ()()))))()()(.</div><div class="line">  Stack(bottom to top): &#123;4,5,6,7,12&#125;.</div><div class="line">  longest is 4. (12 - 1) - 7.</div><div class="line">   4. (4 - 1) - ?. So I set when the stack is empty. ? = -1.</div></pre></td></tr></table></figure><p>​    As we can see, we get all invalid elements index.</p><p>​    If the stack is <strong>empty</strong>, just need to return <strong>s.length</strong>.</p><p>​    If the stack is <strong>not</strong> <strong>empty</strong>, we need to get <strong>longest</strong> <strong>Valid</strong> <strong>Parenthese</strong>.</p><h3 id="6-Code"><a href="#6-Code" class="headerlink" title="6. Code:"></a>6. Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; chars = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre = s.length();</div><div class="line">        <span class="comment">//push stack</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();i++)&#123;</div><div class="line">            <span class="comment">//check whether stack is empty.</span></div><div class="line">            <span class="keyword">if</span>(chars.empty()||s.charAt(i) == <span class="string">'('</span>)chars.push(i);<span class="comment">//empty or ( push</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(chars.peek()) == <span class="string">'('</span>)<span class="comment">// ) if top is ( pop out</span></div><div class="line">                chars.pop();</div><div class="line">            <span class="keyword">else</span> chars.push(i);<span class="comment">//if top is )</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(chars.empty()) <span class="keyword">return</span> s.length();</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//just a flag</span></div><div class="line">        <span class="keyword">while</span> (temp != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//若此时栈空了，那么说明此时的temp就是余下的( or ) return 他的位置，但逻辑就不统一了。</span></div><div class="line">            <span class="comment">//或者pop完 栈空，那么 他的位置就是长度。</span></div><div class="line">            <span class="comment">//else 他的位置长度 - 1 - 上一位。</span></div><div class="line">            temp = chars.empty() ? -<span class="number">1</span> : chars.pop();<span class="comment">//empty temp = -1</span></div><div class="line">            longest = longest &gt; (pre - <span class="number">1</span>) - temp ? longest : (pre - <span class="number">1</span>) - temp;</div><div class="line">            pre = temp;<span class="comment">//previous stack.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> longest;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>(2).  Dynamic Programming:</p><p>​    (()()))如果是（，len[i] = 0;如果是），如果上一个是（，则 len[i]=2    （1）如果上一个是），则要看i - len[i] - 1位的情况 (()())即此时最右边，你得看第5 - 4 - 1 = 0位的情况，    （2）如果是（，那么len[i] = len[i - 1] + 2;但如果是这种情况()(())，同时我们得看上上一位，即我们新加一个），i - len[i - 1] -2处也可以算入最长序列了。()()或者是这样，说明在（1),（2）两种情况时，都可以获得增长，因此我们最后都要加上len[i - len[i - 1] -2]。</p><p>​    <strong>main</strong> idea: use array <strong>len</strong> to store length</p><p>​         if s[i] = ‘(‘, len = 0;</p><p>​         if s[i] = ‘)’, len = the length of <strong>near</strong> Valid Parentheses.</p><p>​    Analysis:         </p><p>​        if, left is ‘(‘, len <strong>at</strong> <strong>least</strong> = <strong>2</strong> , we still need to check <strong>s[i - 2]</strong>. just add len[i - 2]. </p><p>​        if, left is ‘)’, we need to check <strong>i - len[i - 1] -1</strong>, jump to last invalid place to check whether we could get more. if s[i - len[i - 1] - 1] = (; we could get more! </p><p>​        now len[i] = len[i - 1] + 2 + len[i - len[i - 1] - 2]</p><p>​        <strong>check len[i - len[i - 1] - 2] to see whether we can get more!</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses_DP</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>[] len = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(s.charAt(i - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</div><div class="line">                    len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span>;</div><div class="line">                    len[i] = len[i] + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                max = Math.max(len[i],max);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> max;</div></pre></td></tr></table></figure><p>那么我们可以观察得到条件可以合并，i-1 == (不再重要，反正大家都要加2，而且i-1 == （，len【i-1】==0加不加无所谓</p><p>Try to observe the if condition, we can get a more concise version!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>&amp;&amp;i - len[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span>&amp;&amp; s.charAt(i - len[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>)</div><div class="line">&#123;</div><div class="line">  len[i] = len[i - <span class="number">1</span>] + <span class="number">2</span> + (i - len[i - <span class="number">1</span>] -<span class="number">2</span> &gt;= <span class="number">0</span>? len[i - len[i - <span class="number">1</span>] -<span class="number">2</span>]:<span class="number">0</span>);</div><div class="line">  max = Math.max(len[i],max);</div><div class="line">&#125;<span class="comment">//对于这段程序的理解：如果加入的是)，那么要开始改变的。</span></div><div class="line"><span class="comment">// 我们要找上上个（，在且只可能在i - len[i - 1] - 1，如果是个（，那么长度可以+2</span></div><div class="line"><span class="comment">// 同时看看能不能变的更长。要看上上一个（左边的序列。</span></div></pre></td></tr></table></figure><p>​</p><p>​</p><p>​</p><p>​     </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;32-Longest-Valid-Parentheses&quot;&gt;&lt;a href=&quot;#32-Longest-Valid-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;32. Longest Valid Parentheses&quot;&gt;&lt;/a&gt;32. Longest Valid Parentheses&lt;/h1&gt;&lt;h3 id=&quot;1-Description：&quot;&gt;&lt;a href=&quot;#1-Description：&quot; class=&quot;headerlink&quot; title=&quot;1. Description：&quot;&gt;&lt;/a&gt;1. Description：&lt;/h3&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;&amp;quot;(()&amp;quot;&lt;/code&gt;, the longest valid parentheses substring is &lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;, which has length = 2.&lt;/p&gt;
&lt;p&gt;Another example is &lt;code&gt;&amp;quot;)()())&amp;quot;&lt;/code&gt;, where the longest valid parentheses substring is &lt;code&gt;&amp;quot;()()&amp;quot;&lt;/code&gt;, which has length = 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hzjry123.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hzjry123.github.io/2017/01/20/hello-world/"/>
    <id>https://hzjry123.github.io/2017/01/20/hello-world/</id>
    <published>2017-01-20T17:05:22.000Z</published>
    <updated>2017-01-20T17:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
